[
    "interations: | What are all the airlines? | SELECT * FROM AIRLINES | Of these, which is Jetblue Airways? | SELECT * FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\" | What is the country corresponding it? | SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the abbreviations? | SELECT Abbreviation FROM AIRLINES | What is the abbreviation for Jetblue Airways? | SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | List all airline names and their abbreviations. | SELECT Airline ,  Abbreviation FROM AIRLINES | Of these, list only those in the USA. | SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Find all information about the airport in the city Anthony. | SELECT * FROM AIRPORTS WHERE city  =  \"Anthony\" | What is the airport code and airport name? | SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airlines? | SELECT * FROM AIRLINES | How many are there? | SELECT count(*) FROM AIRLINES serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airports? | SELECT * FROM AIRPORTS | How many are there? | SELECT count(*) FROM AIRPORTS serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flights? | SELECT * FROM FLIGHTS | How many are there? | SELECT count(*) FROM FLIGHTS serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airline names? | SELECT Airline FROM AIRLINES | Of this, which has the abbreviation 'UAL'? | SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are the names of the airlines in the USA? | SELECT airline FROM AIRLINES WHERE Country  =  \"USA\" | How many are there? | SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are the city and country for all airports? | SELECT City ,  Country FROM AIRPORTS | Of these, what are the city and country for Alton airport? | SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airport names? | SELECT AirportName FROM AIRPORTS | Of these, which has code 'AKO'? | SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airport names? | SELECT AirportName FROM AIRPORTS | Which is in Aberdeen? | SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flights departing from 'APG'? | SELECT * FROM FLIGHTS WHERE SourceAirport  =  \"APG\" | How many are there? | SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What flights land in ATO? | SELECT * FROM FLIGHTS WHERE DestAirport  =  \"ATO\" | How many are there? | SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flights derparting from Aberdeen? | SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" | How many are there? | SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flights arriving in Aberdeen. | SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" | How many are there? | SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flights that leave from Aberdeen? | SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" | Of those, which land in Ashley? | SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\" | How many are there? | SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flights on Jetblue Airways? | SELECT * FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\" | How many are there? | SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are the United Airlines flights? | SELECT * FROM AIRLINES WHERE Airline  =  \"United Airlines\" | How many are there? | SELECT count(*) FROM AIRLINES WHERE Airline  =  \"United Airlines\" | How many land in ASY Airport? | SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are the United Airlines flights? | SELECT * FROM AIRLINES WHERE Airline  =  \"United Airlines\" | Which ones leave from AHD? | SELECT * FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\" | How many are there? | SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Which United Airlines flights fly into Aberdeen? | SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\" | How many are there? | SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Name all cities that have destination airports. | SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport | Order them by number of arriving flights. | SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC | Which one has the most? | SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Name all cities that have source airports. | SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport | Order them by number of departing flights. | SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC | Which one has the most? | SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are airport codes of any airport with a arriving flight? | SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport | Also include codes of airports with departure flights. | SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport | Which one has the highest number of flights? | SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are airport codes of any airport with a arriving flight? | SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport | Also include codes of airports with departure flights. | SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport | Which one has the least number of flights? | SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Count the number of flights by airline. | SELECT count(*) ,  T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline | Which airline has the most? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airline abbreviations and what countries are they in? | SELECT Abbreviation ,  Country FROM AIRLINES | Order them by the number of flights that they have. | SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) | Which one has the fewest? | SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Which flights leave from AHD? | SELECT * FROM FLIGHTS WHERE SourceAirport  =  \"AHD\" | What are their airlines? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Which flights arrive in AHD? | SELECT * FROM FLIGHTS WHERE DestAirport  =  \"AHD\" | What are their airlines? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Which airlines have flights departing from APG? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" | Of those, which also have flights from CVO? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | Which airlines have flights from CVO? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" | Of these, which do not have flights from APG? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airlines? | SELECT DISTINCT Airline FROM AIRLINES | Which ones have more than 10 flights? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the airlines? | SELECT DISTINCT Airline FROM AIRLINES | Which ones have less than 200 flights? | SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200 serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flight numbers? | SELECT FlightNo FROM FLIGHTS | Which belong to United Airlines? | SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flight numbers? | SELECT FlightNo FROM FLIGHTS | Of these, which correspond to flights leaving from APG? | SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flight numbers? | SELECT FlightNo FROM FLIGHTS | Also, which numbers are for flights that land in APG? | SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flight numbers? | SELECT FlightNo FROM FLIGHTS | Of these, which are departure flights? | SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode | Which leave from Aberdeen? | SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are all the flight numbers? | SELECT FlightNo FROM FLIGHTS | Of these, which are arrival flights? | SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode | Which land in Aberdeen? | SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What flights land in Aberdeen? | SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" | Also include flights that land in Abilene. | SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\" | How many are there? | SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\" serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What are the source airports? | SELECT SourceAirport FROM Flights | Also include the destination airports. | SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights | Which airports are not included? | SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights) serialized_schema: | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport",
    "interations: | What information is there on pets? | SELECT * FROM pets | Which pets weigh more than 10? | SELECT * FROM pets WHERE weight  >  10 | How many are there? | SELECT count(*) FROM pets WHERE weight  >  10 serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Order the pets by age | SELECT * FROM pets ORDER BY pet_age | How much does each one weigh? | SELECT weight FROM pets ORDER BY pet_age | What about the first one? | SELECT weight FROM pets ORDER BY pet_age LIMIT 1 serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What are the different types of pets? | SELECT DISTINCT petType FROM pets | For each of those types, what is the maximum weight? | SELECT max(weight) ,  petType FROM pets GROUP BY petType serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which pets are owned by students older than 20? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20 | How many are there? | SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20 serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Who are the female students? | SELECT * FROM student WHERE sex  =  'F' | Of those, who has a pet? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.sex  =  'F' | How many of those have dogs? | SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What are the different pet types? | SELECT DISTINCT pettype FROM pets | How many exist? | SELECT count(DISTINCT pettype) FROM pets serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | what is the first name of every student? | SELECT DISTINCT T1.Fname FROM student AS T1 | Of those names, which ones correspond to somebody who has a cat? | SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' | Also, combine those names with those who have a dog. | SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which students have a dog as their type of pet? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' | Who also has a cat? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' | What are their first names? | SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which students have a cat as their pets? | SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat') | What are they majoring in? | SELECT major FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat') | Also, how old are they? | SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat') serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What is every student's id? | SELECT stuid FROM student | Of those ids, which correspond to those who own cats as pets? | SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' | List all the other ids. | SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which students have dogs? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' | Of those, who does not own a cat? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' | What are their first names and ages? | SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Who is the youngest pet? | SELECT * FROM pets ORDER BY pet_age LIMIT 1 | What type are they? | SELECT pettype FROM pets ORDER BY pet_age LIMIT 1 | Also, how much do they weigh? | SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1 serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What are ids of every pet? | SELECT petid FROM pets | For those, which refer to pets older than 1? | SELECT petid FROM pets WHERE pet_age  >  1 | Also, how much do they weigh? | SELECT petid ,  weight FROM pets WHERE pet_age  >  1 serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What are the different pet types? | SELECT DISTINCT pettype FROM pets | For each of those, what is the maximum age? | SELECT max(pet_age) ,  pettype FROM pets GROUP BY pettype | What about the average age? | SELECT avg(pet_age) ,  pettype FROM pets GROUP BY pettype serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What information is there on pets? | SELECT * FROM pets | For each pet type, what is the average weight? | SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which students have pets? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid | What are the different first names? | SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid | Also, what are their ages? | SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which students have pets? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid | Of those, whose last name is smith? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith' | What is their pet's id? | SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which of the students have pets? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid | How many pets does each of them have? | SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What is the first name and sex of each student? | SELECT T1.fname ,  T1.sex FROM student AS T1 | Which of those belong to somebody who has more than one pet? | SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1 serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What is the id of the three-year old cat? | SELECT petid FROM pets WHERE pet_age  =  3 AND pettype  =  'cat' | Who is the owner of that cat? | SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat' | What is their last name? | SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat' serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | Which students do not own any pets? | SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid) | What is their average age? | SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid) serialized_schema: | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight",
    "interations: | What are the names of all the countries? | SELECT Name FROM country | Give the names of the ones that became independent after 1950. | SELECT Name FROM country WHERE IndepYear  >  1950 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | How many countries are there? | SELECT count(*) FROM country | Out of those, how many have a republic as their form of government? | SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the countries in the Carribean region? | SELECT * FROM country WHERE Region  =  \"Caribbean\" | What is the surface area of each of those countries? | SELECT SurfaceArea FROM country WHERE Region  =  \"Caribbean\" | Find the total surface area of the above. | SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What continent does each country belong to? | SELECT Continent FROM country | Which one does Anguila belong to? | SELECT Continent FROM country WHERE Name  =  \"Anguilla\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of all the regions? | SELECT Region FROM country | Which of those is the city Kabul located in? | SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are all the languages? | SELECT LANGUAGE FROM countrylanguage | What are the languages spoken in Aruba? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" | Which one is the most popular? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the population and life expectancies for all countries? | SELECT Population ,  LifeExpectancy FROM country | Of those, which ones are for the country Brazil? | SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which region is Angola in? | SELECT Region FROM country WHERE Name  =  \"Angola\" | For that country, what is its population? | SELECT Population FROM country WHERE Name  =  \"Angola\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the life expectancies for all the countries? | SELECT LifeExpectancy FROM country | What are the life expectancies for the countries in the region of Central Africa? | SELECT LifeExpectancy FROM country WHERE Region  =  \"Central Africa\" | What is the average of those? | SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of the countries in Asia? | SELECT Name FROM country WHERE Continent  =  \"Asia\" | Which one has the shortest life expectancy? | SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | How many people live in Asia? | SELECT sum(Population) FROM country WHERE Continent  =  \"Asia\" | What about the largest GNP among them? | SELECT max(GNP) FROM country WHERE Continent  =  \"Asia\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which countries are in Africa? | SELECT * FROM country WHERE Continent  =  \"Africa\" | Which countries are also republics? | SELECT * FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\" | What is the average of their life expectancies? | SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the countries in the continents of Asia or Europe? | SELECT * FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\" | What is the surface area of each country? | SELECT SurfaceArea FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\" | What is the total surface area summed up? | SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the populations of each city in the district of Gelderland? | SELECT Population FROM city WHERE District  =  \"Gelderland\" | What is the total population in that district? | SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are all the nations? | SELECT * FROM country | Which of those have a government that is a US territory? | SELECT * FROM country WHERE GovernmentForm  =  \"US Territory\" | For those, what is the average GNP and total population? | SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are all the distinct languages used around the world? | SELECT DISTINCT LANGUAGE FROM countrylanguage | How many are there? | SELECT count(DISTINCT LANGUAGE) FROM countrylanguage serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the distinct forms of government in the continent of Africa? | SELECT DISTINCT GovernmentForm FROM country WHERE Continent  =  \"Africa\" | How many are there? | SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What is the information about the country Aruba? | SELECT * FROM country WHERE Name  =  \"Aruba\" | What are the languages used in Aruba? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" | How many are there? | SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the languages used in Afghanistan? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" | Of those, how many are the official languages? | SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | How many languages are spoken in each country? | SELECT count(*) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name | Which country speaks the most? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | How many languages are spoken on each continent? | SELECT COUNT(*) ,  T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent | Which one speaks the most languages? | SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the countries that speak English? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" | Which of those also speak Dutch? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" | How many of them are there? | SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\") serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of countries which speak English? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" | Of those countries, what are the names of the nations that speak French as well? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the official languages of each country? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\" | Of those countries, give the names of the ones that have English as one of the official languages. | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" | Of those, which also have French as another official language? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | In which countries is Chinese spoken? | SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\" | Which distinct continents are they in? | SELECT DISTINCT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\" | How many of them are there? | SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are all the different regions? | SELECT DISTINCT Region FROM country | Which of those speak Dutch or English? | SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the official languages for each country? | SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE IsOfficial  =  \"T\" | Which of these countries have English or Dutch? | SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are all the different languages used in the continent of Asia? | SELECT DISTINCT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" | Which one is used by the largest number of Asian countries? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which countries have republics as their form of government? | SELECT * FROM country WHERE GovernmentForm  =  \"Republic\" | Which language is spoken by only one of those countries? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of all the cities that use English? | SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" | Which of those has the largest population? | SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names, population, and life expectancy for all the countries in Asia? | SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" | Of those, which belong to the country with the largest surface area? | SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the official languages of each country? | SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\" | Which countries do not have English as the official language? | SELECT * FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\") | In those countries, what is the average life expectancy? | SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\") serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of each country that does not speak English? | SELECT Name FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\") | How many people live in those countries? | SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\") serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which country has a head of state named Beatrix? | SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" | What languages are spoken in that country? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" | Which of those languages is the official one? | SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of all the countries? | SELECT T1.Name FROM country AS t1 | What are the names of those countries that were founded after 1930? | SELECT T1.Name FROM country AS t1 WHERE  IndepYear  <  1930 | For those countries, how many unique official languages are spoken in total? | SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are all the information about European countries? | SELECT * FROM country WHERE Continent  =  \"Europe\" | Of those countries, What is the minimum surface area? | SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\" | What are the countries that have a greater surface area than that? | SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\") serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What is the maximum population of a country in Asia? | SELECT min(population) FROM country WHERE Continent  =  \"Asia\" | Which countries in Africa have a population smaller than that? | SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\") serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What is the smallest population of a country in Africa? | SELECT min(population) FROM country WHERE Continent  =  \"Africa\" | Which Asian countries have a greater population than that? | SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\") serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the country codes of all the countries? | SELECT CountryCode FROM countrylanguage | Of those countries, give the country codes for those which do not speak English. | SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the country codes of all the countries? | SELECT DISTINCT CountryCode FROM countrylanguage | Of those, which do not speak English? | SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! =  \"English\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the country codes for countries which are not republics? | SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" | Of those, which do not speak English? | SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of the countries where English is the official language? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English' | What are the names of the countries in Europe that are not one of those? | SELECT Name FROM country WHERE Continent  =  'Europe' AND Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English') | What are the names of the cities in those countries? | SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English') serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the countries in Asia where Chinese is spoken? | SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\" | Of those, which have Chinese as the official language? | SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\" | What are the different cities in those countries? | SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which country has the smallest population? | SELECT * FROM country ORDER BY Population LIMIT 1 | What is its name, independence year, and surface area? | SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What is the country with the largest surface area? | SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 1 | What is its population, name and leader? | SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of the countries? | SELECT Name FROM country | Which of them speak at least three languages? | SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2 | Also, how many languages are spoken in each of those countries? | SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What is the average city population for each city? | SELECT avg(Population) FROM city | For each district, count how many cities have a population greater than the average. | SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | The countries with which government form have an average life expectancy greater than age 72? | SELECT * FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72 | For those, list the total population and government form name. | SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which continents have an average life expectancy less than age 72? | SELECT Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72 | Give their average life expectancy and total population. | SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the countries with the top 5 largest surface areas? | SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 5 | What are the surface areas and names of those countries? | SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Order the countries by descending population size. | SELECT * FROM country ORDER BY Population DESC | Give the names of the 3 countries which have the most. | SELECT Name FROM country ORDER BY Population DESC LIMIT 3 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Order the countries by increasing population. | SELECT * FROM country ORDER BY Population | Give the names of the 3 countries with the lowest. | SELECT Name FROM country ORDER BY Population DESC LIMIT 3 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the countries in the continent of Asia? | SELECT * FROM country WHERE continent  =  \"Asia\" | How many are there? | SELECT count(*) FROM country WHERE continent  =  \"Asia\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Which countries are in the continent of Europe? | SELECT * FROM country WHERE continent  =  \"Europe\" | Of those, what are the names of those that have a population of 80000? | SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\" serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What countries are in North America? | SELECT * FROM country WHERE Continent  =  \"North America\" | Of those, which have surface area greater than 3000? | SELECT * FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000 | What is the total population and average surface area of those countries? | SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the names of all the cities? | SELECT name FROM city | Which of those have a population between 160000 and 900000? | SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | What are the different languages? | SELECT LANGUAGE FROM countrylanguage | Which one is spoken in the most countries? | SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1 serialized_schema: | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage",
    "interations: | Tell me﻿ the director of the cartoon named \"Day of the Dark Knight!\". | SELECT Directed_by FROM Cartoon WHERE Title = \"Day of the Dark Knight!\" | What is the channel of this cartoon? | SELECT Channel FROM Cartoon WHERE Title = \"Day of the Dark Knight!\" | Give me the titles of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"? | SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\" serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Show me all the information about the Italian TV Channels. | SELECT * FROM TV_Channel WHERE Country = \"Italy\" | How about the Polish TV Channels? | SELECT * FROM TV_Channel WHERE Country = \"Poland\" | Which country has the most of TV Channels? List the country and number of TV Channels it has. | SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1 serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the TV Channel of the cartoon titled \"The Eyes of Despero!\". | SELECT Channel FROM Cartoon WHERE Title = \"The Eyes of Despero!\" | How about this channel's series name? | SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = \"The Eyes of Despero!\") | Tell me the number of different series names and contents in the TV Channel table. | SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the package option for the series named \"Rock TV\". | SELECT Package_Option FROM TV_Channel WHERE series_name = \"Rock TV\" | tell me the language of this series. | SELECT Language FROM TV_Channel WHERE series_name = \"Rock TV\" | List the language used least number of TV Channel. List language and number of TV Channel. | SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1 serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the author of the cartoon \"The Rise of the Blue Beetle!\" | SELECT Written_by FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle!\" | How about its director? | SELECT Directed_by FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle!\" | What is its TV Channel? | SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\" serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | tell me the country of the TV Channel for the series named \"Sky Radio\". | SELECT Country FROM TV_Channel WHERE series_name = \"Sky Radio\" | How about its content? | SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\" | I want to know the title of all Cartoons showed on TV Channel with series name \"Sky Radio\". | SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\" serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the rating of the episode named \"Double Down\". | SELECT Rating FROM TV_series WHERE Episode = \"Double Down\" | How about the rating of the episode named \"Keepers\". | SELECT Rating FROM TV_series WHERE Episode = \"Keepers\" | Okay, I want to know the top 3 highest Rating TV series. List the TV series's Episode and Rating. | SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3 serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | tell me the weekly rank of the episode named \"Emily\". | SELECT Weekly_Rank FROM TV_series WHERE Episode = \"Emily\" | How about its share? | SELECT Share FROM TV_series WHERE Episode = \"Emily\" | tell me the minimum and maximum share of TV series. | SELECT max(SHARE) , min(SHARE) FROM TV_series serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the rating of the episode titled \"A Love of a Lifetime\". | SELECT Rating FROM TV_series WHERE Episode = \"A Love of a Lifetime\" | How about its weekly rank? | SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\" | And What is its TV Channel? | SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\" serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | tell me the content of TV Channel with the series named \"Sky Radio\". | SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\" | How about its language? | SELECT Language FROM TV_Channel WHERE series_name = \"Sky Radio\" | Okay, now I want to know the Episode of all TV series showed on TV Channel with series name \"Sky Radio\". | SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\" serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the air date of the cartoon titled \"Fall of the Blue Beetle!\". | SELECT Original_air_date FROM Cartoon WHERE Title = \"Fall of the Blue Beetle!\" | What is its production code? | SELECT Production_code FROM Cartoon WHERE Title = \"Fall of the Blue Beetle!\" | tell me the production code and channel of the most recently aired cartoon. | SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1 serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the cartoons directed by Ben Jone. | SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" | Tell me the cartoons written by Todd Casey. | SELECT Title FROM Cartoon WHERE Written_by = \"Todd Casey\" | Which countries' tv channels are playing some cartoon written by Todd Casey? | SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Todd Casey' serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | which countries' tv channels are playing some cartoon written by Steven Melching? | SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Steven Melching' | which countries' tv channels are not playing any cartoon written by Todd Casey? | SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey' serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Tell me the director of the cartoon titled \"Deep Cover for Batman!\". | SELECT Directed_by FROM Cartoon WHERE Title = \"Deep Cover for Batman!\" | I want to know this cartoon's production code. | SELECT Production_code FROM Cartoon WHERE Title = \"Deep Cover for Batman!\" | Tell me the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang. | SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones' serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | tell me the country of the TV channel with series named \"MTV Music\" | SELECT Country FROM TV_Channel WHERE series_name = \"MTV Music\" | Tell me the number of Italian channels. | SELECT COUNT(*) FROM TV_Channel WHERE Country = \"Italy\" | find id of the tv channels that from the countries where have more than two tv channels. | SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2 serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Who is the director of the cartoon titled \"Return of the Fearsome Fangs!\"? | SELECT Directed_by FROM Cartoon WHERE Title = \"Return of the Fearsome Fangs!\" | Tell me the cartoons directed by Ben Jones. | SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" | Find the id of tv channels that do not play any cartoon directed by Ben Jones. | SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones' serialized_schema: | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel",
    "interations: | Show all the poker players. | SELECT * FROM poker_player | How many are there? | SELECT count(*) FROM poker_player serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What is the earnings of each poker player? | SELECT Earnings FROM poker_player | Sort them in descending order. | SELECT Earnings FROM poker_player ORDER BY Earnings DESC serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Show all the information about each poker player. | SELECT * FROM poker_player | What are their final table mades? | SELECT Final_Table_Made FROM poker_player | What are their final table mades and best finishes? | SELECT Final_Table_Made ,  Best_Finish FROM poker_player serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What is the earnings of each poker player? | SELECT Earnings FROM poker_player | Give me the average. | SELECT avg(Earnings) FROM poker_player serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What is the money rank of each poker player? | SELECT Money_Rank FROM poker_player | Sort them in the decreasing order. | SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC | Return the top one. | SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Which poker player has earnings less than 200000? | SELECT * FROM poker_player WHERE Earnings  <  200000 | Among them, what is the maximum number of final tables made? | SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Show all the poker players. | SELECT * FROM poker_player | What are their names? | SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Which poker players have earnings higher than 300000? | SELECT * FROM poker_player WHERE Earnings  >  300000 | What are their names? | SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What are the names of all poker players? | SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID | Sort them in the ascending order of the final tables made. | SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What is the birth date of each poker player? | SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID | Sort the list by the poker player's earnings. | SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings | Give me the result for the player with the lowest earnings. | SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What is the height of each poker player? | SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID | Who has the largest height? | SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1 | What is his or her money rank? | SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What is the height of each poker player? | SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID | Who all have heights greater than 200? | SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200 | What is the average earnings among them? | SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Sort all the poker players in descending order of earnings. | SELECT * FROM poker_player ORDER BY Earnings DESC | What are the names of poker players in descending order of earnings? | SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Show the nationality of each person. | SELECT Nationality FROM people | Group people by their nationality. | SELECT * FROM people GROUP BY Nationality | For each of the result, show the corresponding number of people of that nationality? | SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Show the nationality of each person. | SELECT Nationality FROM people | Count the number of people for each nationality. | SELECT COUNT(*) FROM people GROUP BY Nationality | What is the most common nationality of people? | SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Count the number of people for each nationality. | SELECT COUNT(*) FROM people GROUP BY Nationality | Which nationalities are held by at least two people? | SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2 serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What are the names and birth dates of people? | SELECT Name ,  Birth_Date FROM people | Sort the results in ascending alphabetical order of name. | SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What are the names of all people? | SELECT Name FROM people | What about people whose nationality is not \"Russia\"? | SELECT Name FROM people WHERE Nationality != \"Russia\" serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | Show all the poker players. | SELECT * FROM poker_player | Show all people who are not poker players. | SELECT * FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) | Give me their names. | SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player) serialized_schema: | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height",
    "interations: | What are the death tolls each time? | SELECT killed FROM death | What is the maximum number of deaths in any one time? | SELECT max(killed) FROM death | What about the minimum? | SELECT min(killed) FROM death | Give me the maximum and also the minimum. | SELECT max(killed) ,  min(killed) FROM death serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | Show me information about deaths caused by ships. | SELECT * FROM death as T1 JOIN ship as T2 ON T1.caused_by_ship_id  =  T2.id | Only ships with tonnage 't'. | SELECT * FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't' | Only return the death and injury information for those ships. | SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't' serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | What are the ids and names of the battles? | SELECT id, name FROM battle | Only show those that ships were lost in. | SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle | Please, just the ones with 'Brig' ship type. | SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig' serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | How many people were killed or injured in each battle? | SELECT T1.id ,  T1.name, sum(T3.killed), sum(T3.injured) FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id | Only show the deaths for those battles that produced at least ten deaths. | SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10 serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | List the injuries caused by each ship (give ship id and name please). | SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id | Sort it by decreasing number of injuries. | SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) | Only show the ship id and name that caused the most total injuries. | SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) DESC LIMIT 1 serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | Which battles did the bulgarian commander 'Kaloyan' fight in? | SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' | How about the latin commander 'Baldwin I'? | SELECT name FROM battle WHERE latin_commander  =  'Baldwin I' | Just the ones where they were fighting one another, please. | SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I' serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | Which battle ids lost ships with tonnage '225'? | SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' | Give the names of these battles, too. | SELECT T2.id, T2.name from ship AS T1 join battle AS T2 ON T1.lost_in_battle = T2.id WHERE tonnage  =  '225' | Which battle ids and names did not lose any ship with tonnage '225'? | SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' ); | How many is that? | SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' ); serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | List the name and date of the battle that has lost the ship named 'Lettice' | SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' | Same for 'HMS Atlanta', please. | SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atlanta' | Can you intersect those? | SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta' serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | Which battle ids and names lost ships in the 'English Channel'? | SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel' | Which did not? | SELECT T1.id, T1.name FROM battle EXCEPT SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel' | For these ones, show their names, results, and bulgarian commanders. | SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel' serialized_schema: | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured",
    "interations: | How many continents are there? | SELECT count(*) FROM CONTINENTS; | Show all their ids and names! | SELECT ContId ,  Continent FROM CONTINENTS; | What countries do they each have? | SELECT T1.ContId ,  T1.Continent , * FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent; | Count how many there are for each continent name and id! | SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are the names and ids of the different car makers? | Select FullName, ID From CAR_MAKERS; | What countries are they each from? | Select Country, FullName, ID From CAR_MAKERS; | For each, how many models do they each produce? | SELECT count(*), T1.Country, T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id; | Can actually just show the name, id and the number of models? | SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is the average horsepower of all cars? | Select avg(horsepower) FROM CARS_DATA; | How about the maximum? | SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower DESC LIMIT 1; | What about the minimum? | SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1; | What is the model of the car with this horsepower? | SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is the average weight of all the cars? | SELECT avg(Weight) FROM CARS_DATA | List all the car information with weights above this? | SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  >  (SELECT avg(Weight) FROM CARS_DATA) | How about below this? | SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA) | Please, show just their model names! | SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA) serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are the ids, and models of the cars were made in 1970? | Select T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970'; | Show their horsepower and MPG as well? | Select T1.horsepower, T1.mpg, T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970'; | Also provide the names of their makers! | SELECT T1.Maker, T4.horsepower, T4.mpg, T4.id, T2.model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'; | Just show a unique list of all these different makers. | SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show me the makes and models of each car! | SELECT Make , Model from Car_Names; | Also provide which the year they were produced? | SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId; | Which ones been produce in the earliest year? | SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA); | Show just the make and year! | SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA); serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are all the different car models? | SELECT DISTINCT model FROM MODEL_LIST; | Show also all the car makes and the years that they were produced! | SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id; | Show only those that were made after 1980! | SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980; | What are the distinct car models for these? | SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are the names and country name of each car maker? | Select T1.Maker, T2.CountryName from Car_Makers as T1 JOIN Countries as T2 on T1.Country = T2.CountryId; | Also provide the continent name for each! | SELECT T1.Continent,  T3.Maker, T2.CountryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country; | How many car makers are there per continent? | SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | How many countries are there? | SELECT count(*) from Countries; | How many car makers belong to each one? | SELECT *, count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country; | What is the name of the country that has the least number? | SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) ASC LIMIT 1; | How about the most? | SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | How many makers are there? | Select Count(*) FROM CAR_MAKERS; | What are their full names and ids? | SELECT FullName, id FROM CAR_MAKERS; | What models have they each produced? | SELECT T1.Model ,  T2.FullName, T2.id  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id; | Count how many modes there are per maker. | SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all the car ids with the make amc hornet sporabout (sw)? | SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'; | What is its horsepower? | SELECT T1.Horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'; | How about its MPG? | SELECT T1.MPG FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'; | How about its accelerate? | SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all the different car makers? | SELECT distinct Maker FROM CAR_MAKERS; | What are the names of the countries they belong to? | SELECT T1.Maker, T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId; | Show just the car makers from France! | SELECT T1.Maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'; | How many are there? | SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | How many car models are produced in total? | SELECT count(*) FROM MODEL_LIST; | How many in Germany? | SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'Germany'; | How about in Japan? | SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'japan'; | How about the USA? | SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is all the car information for cars produced in 1974? | SELECT * FROM CARS_DATA WHERE YEAR  =  1974; | Now, show me just the weight and cylinders of these cars. | SELECT Weight, Cylinders FROM CARS_DATA WHERE YEAR  =  1974; | List just those with 8 cylinders! | SELECT Weight, Cylinders FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974; | What is the smallest weight? | SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are all the different country names? | Select CountryName FROM COUNTRIES; | Which ones have no car makers? | Select CountryName FROM COUNTRIES where CountryID not in (Select Country from CAR_MAKERS); | Which ones have at least one? | SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1; | Also provide the country id! | SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all the car makers and their country name? | SELECT T3.Maker, T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country; | Count how many there are per country name? | SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.CountryName; | Show just those from countries in the continent Europe. | SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName; | List the country names of those with at least 3 manufacturers! | SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is the horsepower, make for each car! | SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id; | Show those with 8 cylinders! | SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  8; | How about 3? | SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3; | Show the one with the maximum horsepower. | SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is id of the car with the max horsepower? | SELECT id FROM CARS_DATA ORDER BY horsepower DESC LIMIT 1; | How about with the max MPG? | SELECT id FROM CARS_DATA ORDER BY mpg DESC LIMIT 1; | Show its make! | SELECT T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1; | Now show its model! | SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is the average edispl of all cars? | SELECT avg(edispl) FROM CARS_DATA; | Can you show the average per car make? | SELECT T1.Make, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Make; | How about per car model? | SELECT T1.Model, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Model; | Show the average for the model volvo! | SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are all the different models for each car? | SELECT distinct Model from CAR_NAMES; | What are the makes for each? | SELECT Model, Make FROM CAR_NAMES; | How many makes are there for each? | SELECT Model, count(*) FROM CAR_NAMES GROUP BY Model; | What is the model name with the most makes? | SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show the full names of all the different car makers? | SELECT FullName FROM CAR_MAKERS; | Also include the car models produced by each! | SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker; | Show me just those produced by the maker with full name American Motor Company! | SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'; | How many are there? | SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is all the information for the makers that have designed at least 1 car model! | SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker; | Which ones have designed more than 1? | SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  1; | How about more than 3? | SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3; | List just the full name and id! | SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | How many different models has maker with full name General Motors produced? | SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id WHERE T3.FullName  =  'General Motors'; | How many different models weigh over 3500 pounds? | SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T1.MakeId  =  T3.Id WHERE T3.weight > 3500; | How many models have either of these features? | SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500; | Show me the distinct list of their model names! | SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show the years and weight of all the cars! | SELECT Year, weight FROM CARS_DATA; | Show distinct years that the cars that weigh more than 3000 were produced! | SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight  >  3000; | How about the different years for those that weight less than 4000. | SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight  <  4000; | What are the distinct years, for the cars that are both? | SELECT DISTINCT Year FROM CARS_DATA WHERE Weight  >  3000 AND Weight  <  4000; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is the lowest accelerate for any car? | SELECT accelerate FROM CARS_DATA ORDER BY accelerate ASC LIMIT 1; | How about the highest? | SELECT accelerate FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1; | What is the ID, Make and Model of this car? | SELECT T1.ID, T2.Make, T2.Model FROM CARS_DATA as T1 JOIN CAR_NAMES as T2 ON T1.ID = T2.MakeID ORDER BY T1.accelerate DESC LIMIT 1; | Show just its horsepower. | SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all the car information for any car of the model volvo! | SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo'; | What is the car with the least accelerate? | SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1; | What is its horsepower? | SELECT T1.horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1; | What about its number of cylinders? | SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is largest horsepower of all cars? | SELECT horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 | What is the accelerate of the car with this horsepower? | SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 | What are the car ids of the cars with a greater accelerate than this? | SELECT id FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ); | How many are there? | SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 ); serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are the names of the countries that have no car makers? | SELECT CountryName FROM COUNTRIES where CountryId not in (SELECT T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country); | Show me all the names of all the different countries outside of those! | SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country; | How many of these have more than 1 car maker? | SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  1 ); | How about more than 2? | SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 ); serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all models and horsepowers of all cars! | SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id; | Now show just the ones with 4 cylinders. | SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4; | What is the model of that with the lowest horsepower? | SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower ASC LIMIT 1; | How about the greatest horsepower? | SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What is the lowest horsepower of all cars? | SELECT min(Horsepower) FROM CARS_DATA; | Show all the ids and makes of those with a horsepower greater than this! | SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA); | Which ones have 5 cylinders or less? | SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 5; | How about 3 or less? | SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 3; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show me the mpg, horsepower and accelerate for all the cars that were produced before 1980! | SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE YEAR  <  1980; | Also include the cars that have 8 cylinders! | SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980; | What is the max horsepower for this group? | SELECT accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY accelerate DESC LIMIT 1; | how about the max mpg? | SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all the models that were built by the Ford Motor Company. | SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName = 'Ford Motor Company'; | What are all the models except those! | SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName != 'Ford Motor Company'; | Also provide the weights for all different makes for each of these models. | SELECT T1.model, T2.Make, T3.weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company' | List all the different models from these that have makes that are lighter than 3500! | SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | What are all the names of countries? | SELECT CountryName FROM countries; | Which ones have at least one car maker? | SELECT distinct T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country; | Show me all of car names other than these! | SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | Show all the car maker id, names, the models and makes they produce! | SELECT T1.Id ,  T1.Maker, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker; | How many model does each car maker produce? List the id and maker! | SELECT T1.Id ,  T1.Maker, count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id; | Show me those that produce at least 2! | SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2; | For each of these, only show those that have more than 3 car makes! | SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3; serialized_schema: | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year",
    "interations: | How many matches are there? | SELECT count(*) FROM matches | What was the maximum length in minutes for the matches? | SELECT max(minutes) FROM matches | Average? | SELECT avg(minutes) FROM matches | How about for the age of losers and winners? | SELECT avg(loser_age) ,  avg(winner_age) FROM matches serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many distinct tourney names are there? | SELECT count(DISTINCT tourney_name) FROM matches | Which ones have more than 20 matches? | SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  20 | More than 10? | SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many distinct winners played in 2013? | SELECT count(DISTINCT winner_name) FROM matches WHERE year = 2013 | Of those, how many also played in 2016. | SELECT count(*) FROM (SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016) | What are their names? | SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many matches were played? | SELECT count(*) FROM matches | How many where the loser hand is L? | SELECT count(*) FROM matches WHERE loser_hand = \"L\" | How many played in year 2013 or 2016? | SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many players are there? | SELECT count(*) FROM players | Which ones won in the tourney WTA Championships? Give their last name and birth date. | SELECT T1.last_name, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' | Give first name and country code instead. | SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' | Which ones also won in the Australian Open? | SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open' serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | What is the birth date of the oldest player? | SELECT birth_date FROM players ORDER BY birth_date DESC LIMIT 1 | Give the player id and last name instead. | SELECT player_id ,  last_name FROM players ORDER BY birth_date LIMIT 1 | Give the first name and country code instead. | SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many players have right / R hand? | SELECT count(*) FROM players WHERE hand = 'R' | Left / L hand? | SELECT count(*) FROM players WHERE hand = 'L' | Give their country code and birth date. | SELECT country_code ,  birth_date FROM players WHERE hand  =  'L' | Order by their birth date, and give the first and last name instead. | SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many players are there? | SELECT count(*) FROM players | How many tours did the player who did the least number of tours do? | SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours ASC LIMIT 1 | Most number of tours? | SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1 | Give the first name and country code instead. | SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How many matches are there? | SELECT count(*) FROM matches | Find the surface that has the most number. | SELECT surface FROM matches GROUP BY surface ORDER  BY count(*) DESC LIMIT 1 | What about the year? | SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Find the name of the loser who lost the most times. | SELECT loser_name FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1 | Give the rank points as well. | SELECT loser_name, loser_rank_points FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1 | Give the same, but for the winner who won the most times. | SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Give the name of the loser who has the highest rank points. | SELECT loser_name FROM matches ORDER BY loser_rank_points DESC LIMIT 1 | Do the same but for the Australian Open tourney. | SELECT loser_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY loser_rank_points DESC LIMIT 1 | Give the winner name instead. | SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Give the length of the match in minutes of the shortest match. | SELECT minutes FROM matches ORDER BY minutes ASC LIMIT 1 | Longest match? | SELECT minutes FROM matches ORDER BY minutes DESC LIMIT 1 | Give the winner and loser name instead. | SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Find the birth dates of each of the players. | SELECT birth_date FROM players | Find tours and first name instead. | SELECT T2.tours, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name | Give the average ranking instead of the tours. | SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Give the number of tours for each player. | SELECT tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name | Give the average rank points and first name. | SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name | Find the total ranking points instead. | SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Find the number of players for each country. | SELECT count(*) FROM players GROUP BY country_code | Which country has the least number of players? Give the country code. | SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) ASC LIMIT 1 | Greatest number? | SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | What is the number of players for each hand type? Give the hand type as well. | SELECT count(*), hand FROM players GROUP BY hand | For each country? | SELECT count(*), country_code FROM players GROUP BY country_code | Give the ones that have more than 50 players. | SELECT count(*), country_code FROM players GROUP BY country_code HAVING count(*) > 50 | Give the country code only. | SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | Give the name of the 3 oldest losers across all matches. | SELECT DISTINCT loser_name FROM matches ORDER BY loser_age DESC LIMIT 3 | How about the 3 oldest winners. | SELECT DISTINCT winner_name FROM matches ORDER BY winner_age DESC LIMIT 3 | Youngest? Give the rank as well. | SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3 serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | How  many different losers participated in the Australian Open? | SELECT count(DISTINCT loser_name) FROM matches WHERE tourney_name  =  'Australian Open' | Winners? | SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'Australian Open' | How about in the WTA Championships, and were also left handed? | SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L' serialized_schema: | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours",
    "interations: | List all conductor information. | SELECT * FROM conductor | How many conductors are there? | SELECT count(*) FROM conductor serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | What are the names of the conductors? | SELECT Name FROM conductor | What are the ages of the conductors? | SELECT Age FROM conductor | List the names of conductors in ascending order of age. | SELECT Name FROM conductor ORDER BY Age ASC serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the names of conductors | SELECT Name FROM conductor | Among these conductors, which of them are not from the USA? | SELECT Name FROM conductor WHERE Nationality != 'USA' serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the information of record companies. | SELECT Record_Company FROM orchestra | When were they founded? | SELECT Record_Company, Year_of_Founded FROM orchestra | Please list the record companies of orchestras in descending order of years in which they were founded. | SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | What is the attendance of each show? | SELECT Attendance FROM SHOW | What is the average attendance? | SELECT avg(Attendance) FROM SHOW serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | What are the shares of performances? | SELECT SHARE FROM performance | What are the shares of performances whose type is not \"Live final\"? | SELECT SHARE FROM performance WHERE TYPE != \"Live final\" | What are the maximum and the minimum of these values? | SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\" serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the nationalities of conductors. | SELECT Nationality FROM conductor | How many are there? | SELECT count(DISTINCT Nationality) FROM conductor serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the names of conductors. | SELECT Name FROM conductor | List years of work of conductors. | SELECT Year_of_Work FROM conductor | List names of conductors in descending order of years of work. | SELECT Name FROM conductor ORDER BY Year_of_Work DESC serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the names of the conductors. | SELECT Name FROM conductor | List years of work of conductors. | SELECT Year_of_Work FROM conductor | List the name of the conductor with the most years of work. | SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1 serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Show the names of conductors. | SELECT Name FROM conductor | Please list these names with the orchestras they have conducted. | SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Please show the names of the conductors. | SELECT Name FROM conductor | Which of them have conducted more than one orchestras? | SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1 serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Please show the names of the conductors. | SELECT Name FROM conductor | Who has conducted the most orchestras? | SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Please show the names of the conductors. | SELECT Name FROM conductor | Who has conducted orchestras founded after 2008? | SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008 serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Please show the record companies without duplicates. | SELECT Record_Company FROM orchestra GROUP BY Record_Company | Please also show their corresponding number of orchestras. | SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Please show the record formats of orchestras. | SELECT Major_Record_Format FROM orchestra | Please list them in ascending order of count. | SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the information of all record companies. | SELECT Record_Company FROM orchestra | Which one is shared by the most orchestras? | SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the names of orchestras. | SELECT Orchestra FROM orchestra | Which of them have had no performances? | SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance) serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Please list the record companies. | SELECT Record_Company FROM orchestra | Which of them are shared by orchestras founded before 2003? | SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 | Which of them are shared by orchestras founded after 2003? | SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003 | Which of them are shared by orchestras founded before 2003 and after 2003? | SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003 serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | List the orchestras whose record format is \"CD\" or \"DVD\". | SELECT * FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\" | How many of these orchestras are there? | SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\" serialized_schema: | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance",
    "interations: | Show information for all documents. | SELECT * FROM Documents | Show their ids. | SELECT document_id FROM Documents | Also show their document names and document descriptions. | SELECT document_id ,  document_name ,  document_description FROM Documents serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the document name for all documents. | SELECT document_name FROM Documents | Also show their description. | SELECT document_name, Document_Description FROM Documents | Which one has description with the letter 'w' in it? | SELECT document_name FROM Documents WHERE Document_Description LIKE \"%w%\" | Show its name and template id. | SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the the document name for all documents. | SELECT document_name from Documents | Show the document id for the one named \"Robbin CV\"? | SELECT document_id FROM Documents WHERE document_name  =  \"Robbin CV\" | Also show its template id and description. | SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template id for all documents. | SELECT template_id FROM Documents | Show all distinct results. | SELECT DISTINCT template_id FROM Documents | How many are there? | SELECT count(DISTINCT template_id) FROM Documents serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the document ids. | SELECT document_id FROM Documents | Also show their template id and template type code. | SELECT T1.document_id, T2.Template_ID, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID | Which documents are using the template with type code 'PPT'? | SELECT T1.document_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID where T2.Template_Type_Code  =  'PPT' | How many are there? | SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT' serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template id for all documents. | SELECT template_id FROM Documents | For each of them, show the number of documents using it. | SELECT template_id ,  count(*) FROM Documents GROUP BY template_id serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template id for all Documents. | SELECT template_id FROM Documents | Also show its template type code. | SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id | For each of them, show the number of documents using it. | SELECT count(*), T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id | Which one has the most? | SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template id for all documents. | SELECT template_id FROM Documents | For each of them, show the number of documents. | SELECT template_id, count(*) FROM Documents GROUP BY template_id | Which of them are used by more than one document? | SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show template ids used by some document. | SELECT template_id FROM Documents | Show all template ids. | SELECT template_id FROM Templates | Which of them are not used by any document? | SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show info for all templates. | SELECT * FROM Templates | How many are there? | SELECT count(*) FROM Templates serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show template ids for all templates. | SELECT template_id FROM Templates | Also show their version numbers and template type codes. | SELECT template_id ,  version_number ,  template_type_code FROM Templates serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes for all templates. | SELECT template_type_code FROM Templates | Filter out duplicates. | SELECT DISTINCT template_type_code FROM Templates serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template ids for all templates. | SELECT template_id FROM Templates | How about the ids with template type code PP or PPT? | SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template type codes for all templates. | SELECT template_type_code FROM Templates | How many of them have template type code CV? | SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | What is the version number for all template? | SELECT version_number FROM Templates | Only show those with version number later than 5. | SELECT version_number FROM Templates WHERE version_number  >  5 | Also show their template type code. | SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template type code for all templates. | SELECT template_type_code FROM Templates | For each of them, count the number of templates | SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all type codes for templates. | SELECT template_type_code FROM Templates | For each of them, how many templates do they contain? | SELECT template_type_code, count(*) FROM Templates GROUP BY template_type_code | Which of them contains the most templates? | SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes. | SELECT template_type_code FROM Templates | For each of them, show the count of templates. | SELECT template_type_code, count(*) FROM Templates GROUP BY template_type_code | Which of them have fewer than three templates? | SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the version number for all templates. | SELECT Version_Number FROM Templates | What is the smallest value? | SELECT min(Version_Number) FROM Templates | Also show its template type code. | SELECT min(Version_Number) ,  template_type_code FROM Templates serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | What is the template type code of the template. | SELECT template_type_code FROM Templates | Also show the names of all documents using each template. | SELECT T1.template_type_code, T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id | Which of the template type codes is used by document with the name \"Data base\"? | SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all document names. | SELECT document_name FROM Documents | Also show their template type codes. | SELECT T2.document_name, T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id | Which of the documents are using templates with template type code BK? | SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes. | SELECT template_type_code FROM Templates | Also show the document ids using each template. | SELECT T1.template_type_code , T2.document_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id | For each type code, how many documents are using that template? | SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the type codes for all templates. | SELECT template_type_code FROM Templates | For each, how many documents are using this template? | SELECT T1.template_type_code, count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code | Order the template type codes in descending order by this number. | SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC | Which of them has the most? | SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes. | SELECT template_type_code FROM Templates | Show all template type codes that are used by some document. | SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id | How about those that are not used by any document? | SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes. | SELECT template_type_code FROM Ref_template_types | Also show their descriptions. | SELECT template_type_code ,  template_type_description FROM Ref_template_types serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes and descriptions. | SELECT template_type_code ,  template_type_description FROM Ref_template_types | What is the description for template type code \"AD\"? | SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all template type codes. | SELECT template_type_code FROM Ref_template_types | Also show descriptions. | SELECT template_type_code , template_type_description FROM Ref_template_types | Which code has template type description \"Book\"? | SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template ids used by any document. | select Template_ID from Documents | Also show the template type code for those ids. | select T2.Template_ID, T1.template_type_code from Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.template_ID | How about their template type descriptions? | SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID | Show the distinct values among them. | SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the template id for all templates. | SELECT template_id from Templates | Also show their template type description. | SELECT T2.template_id, T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code | What are the template ids with description \"Presentation\"? | SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the info for all paragraphs. | SELECT * FROM Paragraphs | How many are there? | SELECT count(*) FROM Paragraphs serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the id for all paragraphs. | SELECT paragraph_id FROM Paragraphs | Also show their document names. | SELECT T1.paragraph_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID | Only show the id for all paragraphs in the document named 'Summer Show'. | SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show' | How many such paragraphs are there? | SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show' serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the parapraph text for all paragraphs. | SELECT paragraph_text FROM Paragraphs | Also show their paragraph details. | SELECT Other_Details, paragraph_text FROM Paragraphs | What are the details for the paragraph containing 'Korea'? | SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea' serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all paragraph ids and texts. | SELECT paragraph_id ,  paragraph_text FROM Paragraphs | For each of them, also show their document name. | SELECT T1.paragraph_id ,   T1.paragraph_text, T2.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id | What are the ids and texts for the paragraph in the document with name 'Welcome to NY'? | SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY' serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all paragraph text. | SELECT paragraph_text FROM Paragraphs | For each of them, also show the document name. | SELECT T1.paragraph_text, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id | What is the text for the document \"Customer reviews\"? | SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\" serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the document id for all paragraphs. | SELECT document_id FROM Paragraphs | For each id, show the number of paragraphs. | SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id | Order by document id. | SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show all document ids and names. | SELECT document_id ,  document_name FROM Documents | For each of them, count the number of paragraphs in each document. | SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the document id for all paragraphs. | SELECT document_id FROM Paragraphs | For each of these document ids, count the number of paragraphs. | SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id | Which of them have at least two paragraphs? | SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the id number and name for all documents. | SELECT document_id ,  document_name FROM Documents | Also show the paragraph id for those documents. | SELECT T1.document_id ,  T2.document_name , T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id | For each of these results, count the number of paragraphs. | SELECT T1.document_id ,  T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id | Which of them is the longest? | SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the document id for all paragraphs. | SELECT document_id FROM Paragraphs | For each of them, count the number of paragraphs. | SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id | Sort them by these counts. | SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) | Which has the fewest? | SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show the document id for all paragraphs. | SELECT document_id FROM Paragraphs | For each of these ids, show the number of paragraphs. | SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id | Which of them have between 1 and 2 paragraphs? | SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2 serialized_schema: | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details",
    "interations: | Show information for all singers. | SELECT * FROM singer | How many are there? | SELECT count(*) FROM singer serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show names of all singers. | SELECT name FROM singer | For each of them, also show country and age. | SELECT name ,  country ,  age FROM singer | List the results in descending order of their age. | SELECT name ,  country ,  age FROM singer ORDER BY age DESC serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show age for all singers. | select age from singer | What about age for those from France? | select age from singer WHERE country  =  'France' | What is the average, minimum, and maximum age for those? | SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France' serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the names of all songs. | select song_name from singer | Also show the release year for each of them. | SELECT song_name ,  song_release_year FROM singer | Order the result by the age of their singers. | SELECT song_name ,  song_release_year FROM singer ORDER BY age | What is the result for the song by the yongest? | SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show country for all singers. | SELECT country FROM singer | Only show the results for those above 20. | SELECT country FROM singer WHERE age  >  20 | What are all distinct countries for them? | SELECT DISTINCT country FROM singer WHERE age  >  20 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the country for all singers. | SELECT country FROM singer | For each of them, what is the number of singers? | SELECT country ,  count(*) FROM singer GROUP BY country serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | What is the average age for all singers? | SELECT avg(age) FROM singer | Show the name for songs by singers older than that. | SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer) serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the name for all stadiums. | SELECT name FROM stadium | What about those with a capacity between 5000 and 10000? | SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 | Also list the location for them. | SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the capacity for all stadiums. | select capacity FROM stadium | What is the average of them? | SELECT avg(capacity) FROM stadium | Also show the maximum. | SELECT avg(capacity) ,  max(capacity) FROM stadium serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the name and capacity for all stadiums. | SELECT name ,  capacity FROM stadium | Show the result in descending order of their average attendance. | SELECT name ,  capacity FROM stadium ORDER BY average DESC | Which one has the highest? | SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the concert information in year 2014. | SELECT * FROM concert WHERE YEAR  =  2014 | Also show those in year 2015. | SELECT * FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 | How many are there in total? | SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the names of stadiums. | SELECT name from stadium | For each of them, also show the number of concerts. | SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show all stadium names and their capacities. | SELECT name ,  capacity FROM stadium | Order the results in descending order of the number of concerts in year 2014 or after. | SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC | Which one has the most? | SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the year for all concerts. | SELECT YEAR FROM concert | Order them in descending order of the number of concerts | SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC | Which year has the most? | SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show all stadium ids of concerts. | SELECT stadium_id FROM concert | Show the stadium names without any concert. | SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert) serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the country for all singers. | SELECT country FROM singer | How about those for singers above age 40? | SELECT country FROM singer WHERE age  >  40 | How about those for singers below 30? | SELECT country FROM singer WHERE age  <  30 | How about countries with both? | SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show name for stadiums that had a concert in year 2014. | SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 | Show names for all stadiums except for those. | SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the name and theme for all concerts. | SELECT concert_name ,  theme from concert | For each of those, also show the number of singers. | SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the name for all singers. | SELECT name FROM singer | For each of them, also show the number of concerts | SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | List all singer names. | select name from singer | How about those performing concerts in year 2014? | SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | What are the names of all singers? | SELECT name FROM singer | Show the names for those having a song having 'Hey' in its name. | SELECT name FROM singer WHERE song_name LIKE '%Hey%' | Also show the nation for those singers. | SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%' serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the name and location for the stadiums. | SELECT name ,  location FROM stadium | How about those with some concerts happened in the year 2014? | SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 | Among those, what are stadiums also holding some concerts in the year 2015? | SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015 serialized_schema: | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id",
    "interations: | Show the names and birth years of singers | SELECT Name, Birth_Year from singer | Only for the ones born in 1948. | SELECT Name, Birth_Year from singer WHERE Birth_Year = 1948 | Show the name of singers whose birth year is either 1948 or 1949? | SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949 serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | Show the name and net worth of the singers. | SELECT Name, Net_Worth_Millions FROM singer | Order by richest first. | SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC | What is the name of the singer with the largest net worth? | SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1 serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | Show the names and citizenships of singers. | SELECT Name, Citizenship FROM singer | Show citizenship counts. | SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship | Sort that by most common first. | SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC | Limit it to one. | SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | Join singer names with their song titles. | SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID | Limit the entries to where song sales exceed 300000. | SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID WHERE t2.Sales > 300000 | Which are the distinct names in that list? | SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000 serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | Show the names and song counts of singers. | SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name | Show the names of singers that have more than one song. | SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1 serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | Show the songs and sale amounts. | SELECT title, Sales from song | Show the names of singers and the total sales of their songs. | SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | Which singer ids have at least one song? | SELECT DISTINCT Singer_ID from song | Which singer names do not? | SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song) serialized_schema: | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position",
    "interations: | find all employees who are under age 30. | SELECT * FROM employee WHERE age  <  30 | Which cities did they come from? | SELECT city FROM employee WHERE age  <  30 | show the cities from which more than one employee originated. | SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1 serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | show all shops. | SELECT * FROM shop | what is the total number of products they are selling? | SELECT sum(number_products) FROM shop | find the name of the shop with the greatest number of products. | SELECT name FROM shop ORDER BY number_products DESC LIMIT 1 | what are its manager name and district? | SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1 serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | find the average number of products of all stores. | SELECT avg(Number_products) FROM shop | how about the minimum and maximum? | SELECT min(Number_products) ,  max(Number_products) FROM shop serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | show the name and number of product for all shops. | SELECT name, number_products FROM shop | what is the average number of products? | SELECT avg(number_products) FROM shop | Find the names of stores whose number products is less than the average. | SELECT name FROM shop WHERE number_products  <  (SELECT avg(number_products) FROM shop) | how about more than? | SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop) serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | how many evaluations are there? | SELECT count(*) FROM evaluation | what years were they given? | SELECT Year_awarded FROM evaluation | find the name of the employee who received the most evaluation awards. | SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1 serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | find the name of the employees who received past evaluation awards. | SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID | who won the most times? | SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1 | ok, which one received the award with the highest bonus? | SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1 serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | find the number of different employees who were awarded in the past evaluations. | SELECT count(distinct Employee_ID) FROM evaluation | what are their names? | SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID | show the names of the employees who never won. | SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation) serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | how many shops are hiring? | SELECT count(distinct Shop_ID) FROM hiring | what are the shops' names?' | SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id | which one is hiring the largest number of employees? | SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | show all hiring info. | SELECT * FROM hiring | Find the names of any shops not hiring. | SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring) serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | how many employees are being hired in all shops? | SELECT count(*) FROM hiring | show the number for each shop. show the shop name as well. | SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name serialized_schema: | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus",
    "interations: | show all visitors. | SELECT * FROM visitor | order them by their membership level from high to low. | SELECT * FROM visitor ORDER BY Level_of_membership DESC | just show their names. | SELECT name FROM visitor ORDER BY Level_of_membership DESC | do not list those whose membership level is lower than or equal to 4. | SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | find the number of visitors with a membership level higher than 4. | SELECT count(*) FROM visitor WHERE Level_of_membership  >  4 | what are their names and membership levels? | SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 | sort by their age from old to young. | SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | how many museums are in the table? | SELECT count(*) FROM museum | what is the average number of staff working in these museums? | SELECT avg(num_of_staff) FROM museum | Find the name of the museum that has the most staff members. | SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1 | what is its id? | SELECT museum_id FROM museum ORDER BY num_of_staff DESC LIMIT 1 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | find the names of museums opened before 2010. | SELECT name FROM museum WHERE open_year  <  2010 | how about after? | SELECT name FROM museum WHERE open_year  >  2010 | find the minimum number of staff of those museums. | SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010 | find the names of museums which have more staff than that. | SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010) serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | find the names of visitors who visited and who have some museum visit records. | SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id | which of them visited some museums more than once? | SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1 | also show their ids and ages. | SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | what is the total spent on all visits? | SELECT sum(Total_spent) FROM visit | find the name of the visitor who has spent the most money for his or her visits. | SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1 | what are his id and membership level? | SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | show the id and name of all museums. | SELECT Museum_ID, name FROM museum | show the number of tickets sold for each of them. | SELECT t2.Museum_ID ,  t1.name, count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID | which one was visited the most times? | SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | how many museums are there? | SELECT count(*) FROM museum | how many of them have not had any visitors yet? | SELECT count(*) FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit) | what are their names? | SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit) serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | how many tickets were sold from all of the museums? | SELECT sum(num_of_ticket) FROM visit | find the id of the visitor who bought the most tickets at once. | SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1 | Find the name and age of this visitor. | SELECT t1.name,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | find the total cost of all visits. | SELECT sum(Total_spent) FROM visit | what was the amount of the largest one time purchase of tickets out of all visits? | SELECT max(Total_spent) FROM visit | how about the average and maximum number of tickets purchased? | SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | what is the lowest level of membership? | SELECT min(Level_of_membership) FROM visitor | find the number of visitors whose membership level is 1. | SELECT count(*) FROM visitor WHERE Level_of_membership  =  1 | show the ticket expenses of all of their museum visits. | SELECT t2.Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1 | what is the total amount of money spent? | SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | find the names of museums opened before 2009. | SELECT name FROM museum WHERE open_year  <  2009 | what about those opened after 2011? | SELECT name FROM museum WHERE open_year > 2011 | What is the name of the visitor who visited both groups of museums? | SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011 serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | find the names of museums opened after 2010 | SELECT name FROM museum WHERE open_year  >  2010 | find the number of visits to these museums? | SELECT count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010 | Find the number of visitors who did not visit these museums. | SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010) serialized_schema: | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent",
    "interations: | How many high schoolers are there? | SELECT count(*) FROM Highschooler | How many in each grade 11 or 12? | SELECT count(*) FROM Highschooler WHERE grade  =  11 OR grade  =  12 | How many in grade 9 or 10? | SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | How many distinct grades are there? | SELECT count(distinct grade) FROM Highschooler | What are they? | SELECT distinct grade FROM Highschooler | Which one has the least number of highschoolers? | SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) ASC LIMIT 1 | Which one has the most? | SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | How many highschoolers are there in total? | SELECT count(*) FROM Highschooler | How many per grade? | SELECT grade, count(*) FROM Highschooler GROUP BY grade | What grades have at least 10 students? | SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  10 | How about at least 4? | SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | What are the names of all the high school students? | SELECT name FROM highschooler | Show the names of the friends for each one. | SELECT T2.name, T3.name FROM friend as T1 join highschooler as T2  on friend_id = T2.ID join highschooler as T3 on student_id = T3.ID | How many friends does each student each have? | SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | What are the names of all the high schoolers? | SELECT name FROM highschooler | Show me the number of friends for each one. | SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id | Which one has the least number of friends? | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) ASC LIMIT 1 | How about the greatest? | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | How many highschoolers have more than 5? | SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  > 5) | at least 3? | SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 3) | What are their names? | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Show me information on the high schooler named \"Kyle.\" | SELECT * FROM highschooler where name = \"Kyle\" | How many friends does he have? | SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\" | What are their names? | SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\" serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Is there a highschooler named Kyle? | SELECT * FROM highschooler where name = \"Kyle\" | Who does he like? | SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.liked_id  =  T3.id WHERE T2.name  =  \"Kyle\" | What are the names of his friends? | SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\" | How many are there? | SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\" serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Show me all the high school student ids. | SELECT ID FROM highschooler | How many friends do each of them have? | SELECT student_id, count(*) FROM friend group by student_id | Which ones have at least 1? | SELECT student_id FROM Friend | Which ones have none? | SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | What are the names of all the highshcool students? | SELECT name FROM highschooler | Which ones have at least 5 friends? | SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 5) | how about at least 1? | SELECT distinct T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id | how about 0? | SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Show me the ids of all highschoolers who have friends? | SELECT student_id FROM Friend | Also show, for each, the ids of the people they like? | SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id | Now only show those who are liked by someone else! | SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id where T1.student_id in (SELECT liked_id FROM Likes) | Show me just their ids! | SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | How many high schoolers are liked by someone else? | SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id | What are their names? | SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id | How many of them have friends? | SELECT count (*) FROM (SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id) | Who are they? | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | What are the names of the highschoolers who don't like anyone? | SELECT name FROM Highschooler where ID not in (SELECT student_id FROM Likes) | How about those who like others? | SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id | How many people do they each like? | SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | How many high schoolers like somebody else? | SELECT count(distinct student_id) FROM likes | What are their names? | SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id | what is the greatest number of likes anyone has? | SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 | who has the greatest number of likes? | SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Show me the names of all students? | SELECT name FROM highschooler | How about those who like at least one other person! | SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  1 | How about those who like at least two other students! | SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | What are the names of the students who have some friends? | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id | How about those have at least 2 friends? | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2 | What grades are they each in? | SELECT T2.name, T2.grade FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2 | Show me the names of only those who are in a grade higher than 5! | SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2 serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | What grade is the student named Kyle in? | SELECT grade FROM highschooler where name = \"Kyle\" | How many other students like him? | SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id WHERE T2.name  =  \"Kyle\" | What are their names? | SELECT T3.name  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id JOIN Highschooler as T3 on T3.ID = T1.student_id WHERE T2.name  =  \"Kyle\" | How many other students does he like? | SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\" serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Show me the student_id and the grade for all students. | SELECT id, grade FROM highschooler | What is the average grade? | SELECT avg(grade) FROM highschooler | How about for students who have no friends? | SELECT avg(grade) FROM Highschooler WHERE id not IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id) | How about for those who have some friends? | SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id) serialized_schema: | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id",
    "interations: | Show all the teachers. | SELECT * FROM teacher | How many are there? | SELECT count(*) FROM teacher serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | What is the name of each teacher? | SELECT Name FROM teacher | Sort them in ascending order of age. | SELECT Name FROM teacher ORDER BY Age ASC serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | What is the age of each teacher? | SELECT Hometown FROM teacher | Also show the hometown for each. | SELECT Age ,  Hometown FROM teacher serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | What is the hometown of each teacher? | SELECT Hometown FROM teacher | Which teacher's hometown is not \"Little Lever Urban District\"? | SELECT * FROM teacher WHERE Hometown != \"Little Lever Urban Distric\" | Give me their names. | SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\" serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | What are the ages of all the teachers? | SELECT Age FROM teacher | Which teachers are age 32? | SELECT * FROM teacher WHERE Age  =  32 | Which teachers are age 32 or 33? | SELECT * FROM teacher WHERE Age  =  32 OR Age  =  33 | What are their names? | SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33 serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Sort all the teachers by their age. | SELECT * FROM teacher ORDER BY Age | Which teacher is the youngest? | SELECT * FROM teacher ORDER BY Age ASC LIMIT 1 | What is his or her hometown? | SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1 serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | What is the hometown of each teacher? | SELECT Hometown FROM teacher | Can you order teachers by their hometowns? | SELECT * FROM teacher order BY Hometown | Show the number of teachers from each hometown. | SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | How many teachers are there? | SELECT COUNT(*) FROM teacher | How many are there for each hometown? | SELECT COUNT(*) FROM teacher GROUP BY Hometown | Find the most common hometown of teachers. | SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1 serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | How many teachers are there? | SELECT COUNT(*) FROM teacher | How many teachers are there for each hometown? | SELECT COUNT(*) FROM teacher GROUP BY Hometown | Which hometowns are shared by at least two teachers? | SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2 serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Find all the course arrangements. | SELECT * FROM course_arrange | For each of the courses, show the teacher who teaches it. | SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Find all the course arrangements. | SELECT * FROM course_arrange | Show names of teachers and the courses they are arranged to teach. | SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID | Sort the results by teacher's name | SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Find all the course arrangements. | SELECT * FROM course_arrange | Show names of teachers and the courses they are arranged to teach. | SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID | Which teachers teach the math course? Give me their names. | SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\" serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Show all the teacher names. | SELECT Name FROM teacher | Show names of teachers and the number of courses they teach. | SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Show all the teacher names. | SELECT Name FROM teacher | Show names of teachers and the number of courses they teach. | SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name | Show the names of teachers who teach at least two courses. | SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2 serialized_schema: | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade",
    "interations: | Show all the available features. | SELECT * FROM Other_Available_Features | How many available features are there? | SELECT count(*) FROM Other_Available_Features serialized_schema: | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
    "interations: | Find the available features with feature name \"AirCon\". | SELECT * FROM Other_Available_Features WHERE feature_name  =  \"AirCon\" | What is the feature type name? | SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\" serialized_schema: | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
    "interations: | What is the property type description of each property? | SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code | Show the property type descriptions of properties for each property type code. | SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code serialized_schema: | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description",
    "interations: | Show all area codes and states. | SELECT * FROM area_code_state | How many are there? | SELECT count(*) FROM area_code_state serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all info about contestants. | SELECT * FROM contestants | What are their names? | SELECT  contestant_name FROM contestants | Can you also show contestant numbers? | SELECT contestant_number ,  contestant_name FROM contestants | Can you sort them ordered in descending order of contestant name? | SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all info about votes. | SELECT state FROM votes | Also provide vote ids. | SELECT vote_id,  state FROM votes | Also show phone numbers. | SELECT vote_id ,  phone_number ,  state FROM votes serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all area codes. | SELECT area_code FROM area_code_state | What is the largest one? | SELECT max(area_code) FROM area_code_state | How about smallest one? | SELECT min(area_code) FROM area_code_state | Give me both. | SELECT max(area_code) ,  min(area_code) FROM area_code_state serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all votes. | SELECT * FROM votes | Which ones are from the state 'CA'? | SELECT * FROM votes WHERE state  =  'CA' | Among those, can you give me the last date created? | SELECT max(created) FROM votes WHERE state  =  'CA' serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all contestants. | SELECT * FROM contestants | What are their names? | SELECT contestant_name FROM contestants | Can you not include the name 'Jessie Alloway'? | SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway' serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all votes? | SELECT * FROM votes | Among these, what is the list of states? | SELECT state FROM votes | What are the distinct states and create time? | SELECT DISTINCT state ,  created FROM votes serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all the contestants. | SELECT * FROM contestants | Show all the votes. | SELECT * FROM votes | Can you show contestants with at least two votes? | SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2 | What are their contestant numbers and names? | SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2 serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all the contestants. | SELECT * FROM contestants | Show all the votes. | SELECT * FROM votes | Can you show the contestant with the least votes? | SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1 | What is his or her contestant number and contestant name? | SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1 serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all votes. | SELECT * FROM votes | What about those from state 'NY' or 'CA'? | SELECT * FROM votes WHERE state  =  'NY' OR state  =  'CA' | Give me the count of these votes. | SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA' serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all contestants | SELECT * FROM contestants | Which contestants did not get any votes? | SELECT * FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ) | How many are there? | SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ) serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all area codes and states. | SELECT * FROM area_code_state | Show all votes. | SELECT * FROM votes | Get the count of votes for each area code. | SELECT count(*) FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code | What is the area code in which the most voters voted? | SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1 serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all votes. | SELECT * FROM votes | Show those that were for the contestant named 'Tabatha Gehling'. | SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling' | What are the create dates, states, and phone numbers of these votes? | SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling' serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Show all area codes. | SELECT * FROM area_code_state | Can you tell me area codes in which voters voted for the contestant 'Tabatha Gehling'? | SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' | How about both the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'? | SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss' serialized_schema: | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created",
    "interations: | Give me the description of the department that offers the most number of degrees. | SELECT T2.department_description ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 | What's the name and id of that department? | SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show me all the degrees offered by the engineering department. | SELECT * FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer' | How many are there? | SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer' serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show me courses that have exactly 2 sections. | SELECT * FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  =  2 | Show me names and ids for courses that have at most 2 sections. | SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Which semester did the least number of students register? Give me its name and id. | SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) ASC LIMIT 1 | How about the semester that most number of students registered? | SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show me all department names that contain the word \"computer\" | SELECT * FROM Departments WHERE department_name LIKE '%computer%' | Show me their descriptions. | SELECT department_description FROM Departments WHERE department_name LIKE '%computer%' serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | How many people are enrolled in 2 degree programs in one semester? | SELECT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2 | Show me their first, middle, and last names. | SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | How many people are enrolled in the Bachelor degree program? | SELECT DISTINCT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor' | What are their first, middle, and last names? | SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor' serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show me the descriptions of programs with 3 highest number of enrolled students. | SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 3 | Show me the name of program with the most enrolled students. | SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | What is the description of the program that has the least number of enrolled students? | SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) ASC LIMIT 1 | How about the program that has the most number of enrolled students? | SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 | Show me the id and summary. | SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show me the id, first and last names of top 3 students who have enrolled for the most times in any program. | SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3 | Show me just the top 1. | SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Give me the description of a semester with no enrolled students. | SELECT semester_description FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ) | What's the name of that semester? | SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ) serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | What's the name of the course with the least number of enrollments? | SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) ASC LIMIT 1 | How many enrollments does the course with most enrollments have? | SELECT count(*) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 | What's the name of that course? | SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | How many students currently live in North Carolina? | SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' | How many of those students have not registered in any degree program? | SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id | What are their last names? | SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show me date and id of transcripts with exactly 2 course results. | SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  = 2 | How about transcripts with at least 2 course results? | SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | What is the address of the student with first name Timothy and last name Ward? | SELECT current_address_id FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward' | What's his phone number? | SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward' serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Who was the last student to register? Show me the first, middle, and last names of that student. | SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered DESC LIMIT 1 | Who was the first to register? | SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Who is the least recent graduate of the school? List the first, middle, and last names. | SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left DESC LIMIT 1 | Who is the earliest graduate of the school? | SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Give me the id of the address that holds the most number of students? | SELECT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 | How many students live there? | SELECT count(*) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 | Give me all the lines as well as the id of that address. | SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Give me details of the first transcript released. | SELECT other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 | Tell me when it was released as well, along with its details. | SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | What is the oldest transcript release date? | SELECT transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1 | How about the latest? | SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | How many times, at minimum, can a course enrollment result show in different transcript? Show me the course enrollment id. | SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) ASC LIMIT 1 | How many times at most? | SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Show other details of the transcript with least number of results. | SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1 | Show me the date and id of that transcript. | SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1 serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | Find a semester when there was a Master student enrolled. | SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' | How about a semester when there was a Bachelor student enrolled? | SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor' | Find a semester that both types of students were enrolled in. | SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor' serialized_schema: | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id",
    "interations: | List all the information about the owners. | SELECT * FROM Owners | What about the Professionals? | SELECT * FROM Professionals | Now show the states of them. | SELECT state FROM Professionals | Which of them have both owners and professionals living there? | SELECT state FROM Owners INTERSECT SELECT state FROM Professionals serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show all the dog ages. | SELECT age FROM Dogs | What is the maximum and minimum value? | SELECT max(age), min(age) FROM Dogs | Which of the dogs have gone through treatments? | SELECT * FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) | What about the average age of them? | SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | List all the professionals who are Employees. | SELECT * FROM Professionals WHERE role_code = 'Employee' | How many of them live in Connecticut? | SELECT count(*) FROM Professionals WHERE state  =  'Connecticut' | What about in Indiana? | SELECT count(*) FROM Professionals WHERE state  =  'Indiana' | Among all the professionals, which have done treatment only 1 treatments? | SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  =  1 | List the id, last name and cell phone of the professionals who live in the state of Indiana or have done treatment on more than 2 treatments? | SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the dog name and total cost of each dog. | SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id | Which of them cost over 500? | SELECT name FROM Treatments  AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 500 | What about more than 1000? | SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | List all the names of both Professionals and Owners. | SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners | What about the dog names? | SELECT name FROM Dogs | Which human names are not used as dog names. | SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the professional first names and the corresponding treatment type codes for the treatment. | SELECT T1.first_name, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id | What about each professional's id, role, email and the treatment type code? | SELECT T1.professional_id ,  T1.role_code ,  T1.email_address, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id | Which professional did not provide any treatment? Keep the id, role and email. | SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the number of dogs for each owner, keep the owner id. | SELECT T1.owner_id ,count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id | Which one has 2 dogs? | SELECT T1.owner_id ,  T2.first_name ,  T2.last_name, count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id Having count(*) = 2 | What about the one with the most dogs? | SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | How many treatment does each professional finished? | SELECT T1.professional_id , count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id | Show the first name of the professionals who did only 1 treatment. | SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id Having count(*) = 1 | What about at least two treatments? | SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id Having count(*) >= 2 | Show the id, role, and first name of each from the above. | SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | How many dogs for each breed code? | SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code | Which breed codes are the most popular two? | SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 2 | What about the most common 1? | SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 1 | What name is the breed? | SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the dog name and total cost of each dog. | SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id | What are the owner names and the cost from their dogs. | SELECT T1.owner_id, T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id | Who has paid for the most treatments on the dogs? Keep owner IDs and last names. | SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | List the treatment type code and the description. | SELECT * FROM Treatment_Types | For each treatment type, calculate the sum of costs, and order them in descending order. | SELECT treatment_type_code, sum(cost_of_treatment) FROM Treatments group by treatment_type_code order by sum(cost_of_treatment) desc | Show the treatment type description also. | SELECT T2.treatment_type_code, T1.treatment_type_description,  sum(cost_of_treatment) FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1 | So what is the description of the treatment type that costs the least money in total? | SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the dog name and total cost of each dog. | SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id | How many of them cost over 700? | SELECT count(name) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 700 | Which owner paid the cost larger than 400, show the owner id and the zip code? | SELECT T1.owner_id ,T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id Having sum(T3.cost_of_treatment) > 400 | What about the owner who spent the largest cost? | SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | List the professional first names and their types of treatments. | SELECT T1.first_name, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id | Add the counts of them also. | SELECT T1.first_name, T2.treatment_type_code, count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id | Among the results, who did only 1 type of treatment? List the professional ids and cell phone numbers of them. | SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  = 1 | What about at least two types of treatments? | SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | What is the minimum, maximum and average value of the treatment costs? | SELECT min(cost_of_treatment), max(cost_of_treatment), avg(cost_of_treatment) FROM Treatments | Which professionals who did the minimum value of the treatment cost? Provide the first name and last name. | SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT min(cost_of_treatment) FROM Treatments ) | What about the maximum cost? | SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT max(cost_of_treatment) FROM Treatments ) | How about below the average of the cost? | SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | How many dogs for each breed code? | SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code | Which one is the most popular one? | SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) DESC LIMIT 1 | What about the least popular one? | SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) ASC LIMIT 1 | So which dogs are having the breed code? And the treatment dates? | SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the name of dogs whose owners are from the city 'Lake Tia'. | SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.city  =  'Lake Tia' | Add the owner's first names also. | SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.city  =  'Lake Tia' | What about when the owner is from the state of 'Virginia'? | SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia' serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Which one is the oldest dog? List the information of it. | SELECT * FROM Dogs order by age asc limit 1 | What are the last names of the oldest dogs? | SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ) | What about the owner last name of the youngest dog? | SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT min(age) FROM Dogs ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the cities and states of the professionals. | SELECT city, state FROM professionals | How many of them are from 'Hawaii'? | SELECT count(*) FROM professionals WHERE state = 'Hawaii' | List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. | SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin' serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the states of the professionals. | SELECT state FROM professionals | How many of them are from 'Wisconsin'? | SELECT count(*) FROM professionals WHERE state = 'Wisconsin' | List the role code ,  street ,  city ,  state from the above results. | SELECT role_code ,  street ,  city ,  state FROM professionals WHERE state = 'Wisconsin' | What about those professionals who live in a city containing the substring 'West'? | SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%' serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the states of the owners. | SELECT state FROM Owners | How many of them are from 'Vermont'? | SELECT count(*) FROM Owners WHERE state = 'Vermont' | List the first name, last name and email of the owners who lives in the states that has the substring 'North'. | SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%' serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Order the dog ages in descending order. | SELECT age FROM Dogs ORDER BY age | How many of them are below 4? | SELECT count(*) FROM Dogs WHERE age  < 4 | What about the ones that are below the average? | SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show the treatment details. | SELECT * FROM Treatments | Order the cost in ascending order. | SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment ASC | What about in descending order? | SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment DESC | Which one is the most recent cost? | SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1 serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show all the owner information. | SELECT * FROM Owners | What about the dogs? | SELECT count(*) FROM Dogs | Among those, how many of them have been sent to receive treatment? | SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ) | What about those who did not? | SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | Show all the owner information. | SELECT * FROM Owners | How many of them come from the state of 'Arizona'? | SELECT count(*) FROM Owners WHERE state = 'Arizona' | What about those who do not have any dogs temporarily? | SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment",
    "interations: | How many professionals are there? | SELECT count(*) FROM Professionals | How many of them come from 'West Heidi?' | SELECT count(*) FROM Professionals WHERE city = 'West Heidi' | What about those who did not operate any treatment on dogs? | SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ) serialized_schema: | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
]