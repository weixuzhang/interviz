[
    {
        "question": [
            "What are all the airlines?",
            "Of these, which is Jetblue Airways?",
            "What is the country corresponding it?"
        ],
        "queries": [
            "SELECT * FROM AIRLINES",
            "SELECT * FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
            "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the abbreviations?",
            "What is the abbreviation for Jetblue Airways?"
        ],
        "queries": [
            "SELECT Abbreviation FROM AIRLINES",
            "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "List all airline names and their abbreviations.",
            "Of these, list only those in the USA."
        ],
        "queries": [
            "SELECT Airline ,  Abbreviation FROM AIRLINES",
            "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Find all information about the airport in the city Anthony.",
            "What is the airport code and airport name?"
        ],
        "queries": [
            "SELECT * FROM AIRPORTS WHERE city  =  \"Anthony\"",
            "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airlines?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM AIRLINES",
            "SELECT count(*) FROM AIRLINES"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airports?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM AIRPORTS",
            "SELECT count(*) FROM AIRPORTS"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flights?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS",
            "SELECT count(*) FROM FLIGHTS"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airline names?",
            "Of this, which has the abbreviation 'UAL'?"
        ],
        "queries": [
            "SELECT Airline FROM AIRLINES",
            "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are the names of the airlines in the USA?",
            "How many are there?"
        ],
        "queries": [
            "SELECT airline FROM AIRLINES WHERE Country  =  \"USA\"",
            "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are the city and country for all airports?",
            "Of these, what are the city and country for Alton airport?"
        ],
        "queries": [
            "SELECT City ,  Country FROM AIRPORTS",
            "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airport names?",
            "Of these, which has code 'AKO'?"
        ],
        "queries": [
            "SELECT AirportName FROM AIRPORTS",
            "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airport names?",
            "Which is in Aberdeen?"
        ],
        "queries": [
            "SELECT AirportName FROM AIRPORTS",
            "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flights departing from 'APG'?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS WHERE SourceAirport  =  \"APG\"",
            "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What flights land in ATO?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS WHERE DestAirport  =  \"ATO\"",
            "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flights derparting from Aberdeen?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flights arriving in Aberdeen.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flights that leave from Aberdeen?",
            "Of those, which land in Ashley?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"",
            "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"",
            "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flights on Jetblue Airways?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"",
            "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are the United Airlines flights?",
            "How many are there?",
            "How many land in ASY Airport?"
        ],
        "queries": [
            "SELECT * FROM AIRLINES WHERE Airline  =  \"United Airlines\"",
            "SELECT count(*) FROM AIRLINES WHERE Airline  =  \"United Airlines\"",
            "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are the United Airlines flights?",
            "Which ones leave from AHD?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM AIRLINES WHERE Airline  =  \"United Airlines\"",
            "SELECT * FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"",
            "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Which United Airlines flights fly into Aberdeen?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"",
            "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Name all cities that have destination airports.",
            "Order them by number of arriving flights.",
            "Which one has the most?"
        ],
        "queries": [
            "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport",
            "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC",
            "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Name all cities that have source airports.",
            "Order them by number of departing flights.",
            "Which one has the most?"
        ],
        "queries": [
            "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport",
            "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC",
            "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are airport codes of any airport with a arriving flight?",
            "Also include codes of airports with departure flights.",
            "Which one has the highest number of flights?"
        ],
        "queries": [
            "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport",
            "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport",
            "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are airport codes of any airport with a arriving flight?",
            "Also include codes of airports with departure flights.",
            "Which one has the least number of flights?"
        ],
        "queries": [
            "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport",
            "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport",
            "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Count the number of flights by airline.",
            "Which airline has the most?"
        ],
        "queries": [
            "SELECT count(*) ,  T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airline abbreviations and what countries are they in?",
            "Order them by the number of flights that they have.",
            "Which one has the fewest?"
        ],
        "queries": [
            "SELECT Abbreviation ,  Country FROM AIRLINES",
            "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*)",
            "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Which flights leave from AHD?",
            "What are their airlines?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS WHERE SourceAirport  =  \"AHD\"",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Which flights arrive in AHD?",
            "What are their airlines?"
        ],
        "queries": [
            "SELECT * FROM FLIGHTS WHERE DestAirport  =  \"AHD\"",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Which airlines have flights departing from APG?",
            "Of those, which also have flights from CVO?"
        ],
        "queries": [
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "Which airlines have flights from CVO?",
            "Of these, which do not have flights from APG?"
        ],
        "queries": [
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airlines?",
            "Which ones have more than 10 flights?"
        ],
        "queries": [
            "SELECT DISTINCT Airline FROM AIRLINES",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the airlines?",
            "Which ones have less than 200 flights?"
        ],
        "queries": [
            "SELECT DISTINCT Airline FROM AIRLINES",
            "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flight numbers?",
            "Which belong to United Airlines?"
        ],
        "queries": [
            "SELECT FlightNo FROM FLIGHTS",
            "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flight numbers?",
            "Of these, which correspond to flights leaving from APG?"
        ],
        "queries": [
            "SELECT FlightNo FROM FLIGHTS",
            "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flight numbers?",
            "Also, which numbers are for flights that land in APG?"
        ],
        "queries": [
            "SELECT FlightNo FROM FLIGHTS",
            "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flight numbers?",
            "Of these, which are departure flights?",
            "Which leave from Aberdeen?"
        ],
        "queries": [
            "SELECT FlightNo FROM FLIGHTS",
            "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode",
            "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are all the flight numbers?",
            "Of these, which are arrival flights?",
            "Which land in Aberdeen?"
        ],
        "queries": [
            "SELECT FlightNo FROM FLIGHTS",
            "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode",
            "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What flights land in Aberdeen?",
            "Also include flights that land in Abilene.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\"",
            "SELECT * FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"",
            "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What are the source airports?",
            "Also include the destination airports.",
            "Which airports are not included?"
        ],
        "queries": [
            "SELECT SourceAirport FROM Flights",
            "SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights",
            "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
        ],
        "serialized_schema": " | flight_2 | airlines : uid , airline , abbreviation , country | airports : city , airportcode , airportname , country , countryabbrev | flights : airline , flightno , sourceairport , destairport"
    },
    {
        "question": [
            "What information is there on pets?",
            "Which pets weigh more than 10?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM pets",
            "SELECT * FROM pets WHERE weight  >  10",
            "SELECT count(*) FROM pets WHERE weight  >  10"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Order the pets by age",
            "How much does each one weigh?",
            "What about the first one?"
        ],
        "queries": [
            "SELECT * FROM pets ORDER BY pet_age",
            "SELECT weight FROM pets ORDER BY pet_age",
            "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What are the different types of pets?",
            "For each of those types, what is the maximum weight?"
        ],
        "queries": [
            "SELECT DISTINCT petType FROM pets",
            "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which pets are owned by students older than 20?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
            "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Who are the female students?",
            "Of those, who has a pet?",
            "How many of those have dogs?"
        ],
        "queries": [
            "SELECT * FROM student WHERE sex  =  'F'",
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.sex  =  'F'",
            "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What are the different pet types?",
            "How many exist?"
        ],
        "queries": [
            "SELECT DISTINCT pettype FROM pets",
            "SELECT count(DISTINCT pettype) FROM pets"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "what is the first name of every student?",
            "Of those names, which ones correspond to somebody who has a cat?",
            "Also, combine those names with those who have a dog."
        ],
        "queries": [
            "SELECT DISTINCT T1.Fname FROM student AS T1",
            "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
            "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which students have a dog as their type of pet?",
            "Who also has a cat?",
            "What are their first names?"
        ],
        "queries": [
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
            "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which students have a cat as their pets?",
            "What are they majoring in?",
            "Also, how old are they?"
        ],
        "queries": [
            "SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
            "SELECT major FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
            "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What is every student's id?",
            "Of those ids, which correspond to those who own cats as pets?",
            "List all the other ids."
        ],
        "queries": [
            "SELECT stuid FROM student",
            "SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
            "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which students have dogs?",
            "Of those, who does not own a cat?",
            "What are their first names and ages?"
        ],
        "queries": [
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'",
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
            "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' EXCEPT SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Who is the youngest pet?",
            "What type are they?",
            "Also, how much do they weigh?"
        ],
        "queries": [
            "SELECT * FROM pets ORDER BY pet_age LIMIT 1",
            "SELECT pettype FROM pets ORDER BY pet_age LIMIT 1",
            "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What are ids of every pet?",
            "For those, which refer to pets older than 1?",
            "Also, how much do they weigh?"
        ],
        "queries": [
            "SELECT petid FROM pets",
            "SELECT petid FROM pets WHERE pet_age  >  1",
            "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What are the different pet types?",
            "For each of those, what is the maximum age?",
            "What about the average age?"
        ],
        "queries": [
            "SELECT DISTINCT pettype FROM pets",
            "SELECT max(pet_age) ,  pettype FROM pets GROUP BY pettype",
            "SELECT avg(pet_age) ,  pettype FROM pets GROUP BY pettype"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What information is there on pets?",
            "For each pet type, what is the average weight?"
        ],
        "queries": [
            "SELECT * FROM pets",
            "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which students have pets?",
            "What are the different first names?",
            "Also, what are their ages?"
        ],
        "queries": [
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
            "SELECT DISTINCT T1.fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
            "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which students have pets?",
            "Of those, whose last name is smith?",
            "What is their pet's id?"
        ],
        "queries": [
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
            "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which of the students have pets?",
            "How many pets does each of them have?"
        ],
        "queries": [
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
            "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What is the first name and sex of each student?",
            "Which of those belong to somebody who has more than one pet?"
        ],
        "queries": [
            "SELECT T1.fname ,  T1.sex FROM student AS T1",
            "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What is the id of the three-year old cat?",
            "Who is the owner of that cat?",
            "What is their last name?"
        ],
        "queries": [
            "SELECT petid FROM pets WHERE pet_age  =  3 AND pettype  =  'cat'",
            "SELECT * FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
            "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "Which students do not own any pets?",
            "What is their average age?"
        ],
        "queries": [
            "SELECT * FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)",
            "SELECT avg(age) FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid)"
        ],
        "serialized_schema": " | pets_1 | student : stuid , lname , fname , age , sex , major , advisor , city_code | has_pet : stuid , petid | pets : petid , pettype , pet_age , weight"
    },
    {
        "question": [
            "What are the names of all the countries?",
            "Give the names of the ones that became independent after 1950."
        ],
        "queries": [
            "SELECT Name FROM country",
            "SELECT Name FROM country WHERE IndepYear  >  1950"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "How many countries are there?",
            "Out of those, how many have a republic as their form of government?"
        ],
        "queries": [
            "SELECT count(*) FROM country",
            "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the countries in the Carribean region?",
            "What is the surface area of each of those countries?",
            "Find the total surface area of the above."
        ],
        "queries": [
            "SELECT * FROM country WHERE Region  =  \"Caribbean\"",
            "SELECT SurfaceArea FROM country WHERE Region  =  \"Caribbean\"",
            "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What continent does each country belong to?",
            "Which one does Anguila belong to?"
        ],
        "queries": [
            "SELECT Continent FROM country",
            "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of all the regions?",
            "Which of those is the city Kabul located in?"
        ],
        "queries": [
            "SELECT Region FROM country",
            "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are all the languages?",
            "What are the languages spoken in Aruba?",
            "Which one is the most popular?"
        ],
        "queries": [
            "SELECT LANGUAGE FROM countrylanguage",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the population and life expectancies for all countries?",
            "Of those, which ones are for the country Brazil?"
        ],
        "queries": [
            "SELECT Population ,  LifeExpectancy FROM country",
            "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which region is Angola in?",
            "For that country, what is its population?"
        ],
        "queries": [
            "SELECT Region FROM country WHERE Name  =  \"Angola\"",
            "SELECT Population FROM country WHERE Name  =  \"Angola\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the life expectancies for all the countries?",
            "What are the life expectancies for the countries in the region of Central Africa?",
            "What is the average of those?"
        ],
        "queries": [
            "SELECT LifeExpectancy FROM country",
            "SELECT LifeExpectancy FROM country WHERE Region  =  \"Central Africa\"",
            "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of the countries in Asia?",
            "Which one has the shortest life expectancy?"
        ],
        "queries": [
            "SELECT Name FROM country WHERE Continent  =  \"Asia\"",
            "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "How many people live in Asia?",
            "What about the largest GNP among them?"
        ],
        "queries": [
            "SELECT sum(Population) FROM country WHERE Continent  =  \"Asia\"",
            "SELECT max(GNP) FROM country WHERE Continent  =  \"Asia\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which countries are in Africa?",
            "Which countries are also republics?",
            "What is the average of their life expectancies?"
        ],
        "queries": [
            "SELECT * FROM country WHERE Continent  =  \"Africa\"",
            "SELECT * FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"",
            "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the countries in the continents of Asia or Europe?",
            "What is the surface area of each country?",
            "What is the total surface area summed up?"
        ],
        "queries": [
            "SELECT * FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
            "SELECT SurfaceArea FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"",
            "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the populations of each city in the district of Gelderland?",
            "What is the total population in that district?"
        ],
        "queries": [
            "SELECT Population FROM city WHERE District  =  \"Gelderland\"",
            "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are all the nations?",
            "Which of those have a government that is a US territory?",
            "For those, what is the average GNP and total population?"
        ],
        "queries": [
            "SELECT * FROM country",
            "SELECT * FROM country WHERE GovernmentForm  =  \"US Territory\"",
            "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are all the distinct languages used around the world?",
            "How many are there?"
        ],
        "queries": [
            "SELECT DISTINCT LANGUAGE FROM countrylanguage",
            "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the distinct forms of government in the continent of Africa?",
            "How many are there?"
        ],
        "queries": [
            "SELECT DISTINCT GovernmentForm FROM country WHERE Continent  =  \"Africa\"",
            "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What is the information about the country Aruba?",
            "What are the languages used in Aruba?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM country WHERE Name  =  \"Aruba\"",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"",
            "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the languages used in Afghanistan?",
            "Of those, how many are the official languages?"
        ],
        "queries": [
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\"",
            "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "How many languages are spoken in each country?",
            "Which country speaks the most?"
        ],
        "queries": [
            "SELECT count(*) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name",
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "How many languages are spoken on each continent?",
            "Which one speaks the most languages?"
        ],
        "queries": [
            "SELECT COUNT(*) ,  T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent",
            "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the countries that speak English?",
            "Which of those also speak Dutch?",
            "How many of them are there?"
        ],
        "queries": [
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\"",
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\"",
            "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of countries which speak English?",
            "Of those countries, what are the names of the nations that speak French as well?"
        ],
        "queries": [
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\"",
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the official languages of each country?",
            "Of those countries, give the names of the ones that have English as one of the official languages.",
            "Of those, which also have French as another official language?"
        ],
        "queries": [
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\"",
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\"",
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "In which countries is Chinese spoken?",
            "Which distinct continents are they in?",
            "How many of them are there?"
        ],
        "queries": [
            "SELECT T1.name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
            "SELECT DISTINCT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"",
            "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are all the different regions?",
            "Which of those speak Dutch or English?"
        ],
        "queries": [
            "SELECT DISTINCT Region FROM country",
            "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the official languages for each country?",
            "Which of these countries have English or Dutch?"
        ],
        "queries": [
            "SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE IsOfficial  =  \"T\"",
            "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are all the different languages used in the continent of Asia?",
            "Which one is used by the largest number of Asian countries?"
        ],
        "queries": [
            "SELECT DISTINCT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\"",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which countries have republics as their form of government?",
            "Which language is spoken by only one of those countries?"
        ],
        "queries": [
            "SELECT * FROM country WHERE GovernmentForm  =  \"Republic\"",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of all the cities that use English?",
            "Which of those has the largest population?"
        ],
        "queries": [
            "SELECT T1.Name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\"",
            "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names, population, and life expectancy for all the countries in Asia?",
            "Of those, which belong to the country with the largest surface area?"
        ],
        "queries": [
            "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\"",
            "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the official languages of each country?",
            "Which countries do not have English as the official language?",
            "In those countries, what is the average life expectancy?"
        ],
        "queries": [
            "SELECT T2.Language ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  \"T\"",
            "SELECT * FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")",
            "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of each country that does not speak English?",
            "How many people live in those countries?"
        ],
        "queries": [
            "SELECT Name FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")",
            "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which country has a head of state named Beatrix?",
            "What languages are spoken in that country?",
            "Which of those languages is the official one?"
        ],
        "queries": [
            "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\"",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\"",
            "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of all the countries?",
            "What are the names of those countries that were founded after 1930?",
            "For those countries, how many unique official languages are spoken in total?"
        ],
        "queries": [
            "SELECT T1.Name FROM country AS t1",
            "SELECT T1.Name FROM country AS t1 WHERE  IndepYear  <  1930",
            "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are all the information about European countries?",
            "Of those countries, What is the minimum surface area?",
            "What are the countries that have a greater surface area than that?"
        ],
        "queries": [
            "SELECT * FROM country WHERE Continent  =  \"Europe\"",
            "SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\"",
            "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What is the maximum population of a country in Asia?",
            "Which countries in Africa have a population smaller than that?"
        ],
        "queries": [
            "SELECT min(population) FROM country WHERE Continent  =  \"Asia\"",
            "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What is the smallest population of a country in Africa?",
            "Which Asian countries have a greater population than that?"
        ],
        "queries": [
            "SELECT min(population) FROM country WHERE Continent  =  \"Africa\"",
            "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the country codes of all the countries?",
            "Of those countries, give the country codes for those which do not speak English."
        ],
        "queries": [
            "SELECT CountryCode FROM countrylanguage",
            "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the country codes of all the countries?",
            "Of those, which do not speak English?"
        ],
        "queries": [
            "SELECT DISTINCT CountryCode FROM countrylanguage",
            "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE ! =  \"English\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the country codes for countries which are not republics?",
            "Of those, which do not speak English?"
        ],
        "queries": [
            "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\"",
            "SELECT Code FROM country WHERE GovernmentForm ! =  \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of the countries where English is the official language?",
            "What are the names of the countries in Europe that are not one of those?",
            "What are the names of the cities in those countries?"
        ],
        "queries": [
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English'",
            "SELECT Name FROM country WHERE Continent  =  'Europe' AND Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'English')",
            "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the countries in Asia where Chinese is spoken?",
            "Of those, which have Chinese as the official language?",
            "What are the different cities in those countries?"
        ],
        "queries": [
            "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
            "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"",
            "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which country has the smallest population?",
            "What is its name, independence year, and surface area?"
        ],
        "queries": [
            "SELECT * FROM country ORDER BY Population LIMIT 1",
            "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What is the country with the largest surface area?",
            "What is its population, name and leader?"
        ],
        "queries": [
            "SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 1",
            "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of the countries?",
            "Which of them speak at least three languages?",
            "Also, how many languages are spoken in each of those countries?"
        ],
        "queries": [
            "SELECT Name FROM country",
            "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",
            "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What is the average city population for each city?",
            "For each district, count how many cities have a population greater than the average."
        ],
        "queries": [
            "SELECT avg(Population) FROM city",
            "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "The countries with which government form have an average life expectancy greater than age 72?",
            "For those, list the total population and government form name."
        ],
        "queries": [
            "SELECT * FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",
            "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which continents have an average life expectancy less than age 72?",
            "Give their average life expectancy and total population."
        ],
        "queries": [
            "SELECT Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",
            "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the countries with the top 5 largest surface areas?",
            "What are the surface areas and names of those countries?"
        ],
        "queries": [
            "SELECT * FROM country ORDER BY SurfaceArea DESC LIMIT 5",
            "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Order the countries by descending population size.",
            "Give the names of the 3 countries which have the most."
        ],
        "queries": [
            "SELECT * FROM country ORDER BY Population DESC",
            "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Order the countries by increasing population.",
            "Give the names of the 3 countries with the lowest."
        ],
        "queries": [
            "SELECT * FROM country ORDER BY Population",
            "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the countries in the continent of Asia?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM country WHERE continent  =  \"Asia\"",
            "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Which countries are in the continent of Europe?",
            "Of those, what are the names of those that have a population of 80000?"
        ],
        "queries": [
            "SELECT * FROM country WHERE continent  =  \"Europe\"",
            "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What countries are in North America?",
            "Of those, which have surface area greater than 3000?",
            "What is the total population and average surface area of those countries?"
        ],
        "queries": [
            "SELECT * FROM country WHERE Continent  =  \"North America\"",
            "SELECT * FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000",
            "SELECT sum(Population) ,  avg(SurfaceArea) FROM country WHERE Continent  =  \"North America\" AND SurfaceArea  >  3000"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the names of all the cities?",
            "Which of those have a population between 160000 and 900000?"
        ],
        "queries": [
            "SELECT name FROM city",
            "SELECT name FROM city WHERE Population BETWEEN 160000 AND 90000"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "What are the different languages?",
            "Which one is spoken in the most countries?"
        ],
        "queries": [
            "SELECT LANGUAGE FROM countrylanguage",
            "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | world_1 | city : id , name , countrycode , district , population | sqlite_sequence : name , seq | country : code , name , continent , region , surfacearea , indepyear , population , lifeexpectancy , gnp , gnpold , localname , governmentform , headofstate , capital , code2 | countrylanguage : countrycode , language , isofficial , percentage"
    },
    {
        "question": [
            "Tell me﻿ the director of the cartoon named \"Day of the Dark Knight!\".",
            "What is the channel of this cartoon?",
            "Give me the titles of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"?"
        ],
        "queries": [
            "SELECT Directed_by FROM Cartoon WHERE Title = \"Day of the Dark Knight!\"",
            "SELECT Channel FROM Cartoon WHERE Title = \"Day of the Dark Knight!\"",
            "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\""
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Show me all the information about the Italian TV Channels.",
            "How about the Polish TV Channels?",
            "Which country has the most of TV Channels? List the country and number of TV Channels it has."
        ],
        "queries": [
            "SELECT * FROM TV_Channel WHERE Country = \"Italy\"",
            "SELECT * FROM TV_Channel WHERE Country = \"Poland\"",
            "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the TV Channel of the cartoon titled \"The Eyes of Despero!\".",
            "How about this channel's series name?",
            "Tell me the number of different series names and contents in the TV Channel table."
        ],
        "queries": [
            "SELECT Channel FROM Cartoon WHERE Title = \"The Eyes of Despero!\"",
            "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = \"The Eyes of Despero!\")",
            "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the package option for the series named \"Rock TV\".",
            "tell me the language of this series.",
            "List the language used least number of TV Channel. List language and number of TV Channel."
        ],
        "queries": [
            "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Rock TV\"",
            "SELECT Language FROM TV_Channel WHERE series_name = \"Rock TV\"",
            "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the author of the cartoon \"The Rise of the Blue Beetle!\"",
            "How about its director?",
            "What is its TV Channel?"
        ],
        "queries": [
            "SELECT Written_by FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle!\"",
            "SELECT Directed_by FROM Cartoon WHERE Title = \"The Rise of the Blue Beetle!\"",
            "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\""
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "tell me the country of the TV Channel for the series named \"Sky Radio\".",
            "How about its content?",
            "I want to know the title of all Cartoons showed on TV Channel with series name \"Sky Radio\"."
        ],
        "queries": [
            "SELECT Country FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the rating of the episode named \"Double Down\".",
            "How about the rating of the episode named \"Keepers\".",
            "Okay, I want to know the top 3 highest Rating TV series. List the TV series's Episode and Rating."
        ],
        "queries": [
            "SELECT Rating FROM TV_series WHERE Episode = \"Double Down\"",
            "SELECT Rating FROM TV_series WHERE Episode = \"Keepers\"",
            "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "tell me the weekly rank of the episode named \"Emily\".",
            "How about its share?",
            "tell me the minimum and maximum share of TV series."
        ],
        "queries": [
            "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"Emily\"",
            "SELECT Share FROM TV_series WHERE Episode = \"Emily\"",
            "SELECT max(SHARE) , min(SHARE) FROM TV_series"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the rating of the episode titled \"A Love of a Lifetime\".",
            "How about its weekly rank?",
            "And What is its TV Channel?"
        ],
        "queries": [
            "SELECT Rating FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
            "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\""
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "tell me the content of TV Channel with the series named \"Sky Radio\".",
            "How about its language?",
            "Okay, now I want to know the Episode of all TV series showed on TV Channel with series name \"Sky Radio\"."
        ],
        "queries": [
            "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "SELECT Language FROM TV_Channel WHERE series_name = \"Sky Radio\"",
            "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\""
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the air date of the cartoon titled \"Fall of the Blue Beetle!\".",
            "What is its production code?",
            "tell me the production code and channel of the most recently aired cartoon."
        ],
        "queries": [
            "SELECT Original_air_date FROM Cartoon WHERE Title = \"Fall of the Blue Beetle!\"",
            "SELECT Production_code FROM Cartoon WHERE Title = \"Fall of the Blue Beetle!\"",
            "SELECT production_code ,  channel FROM cartoon ORDER BY original_air_date LIMIT 1"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the cartoons directed by Ben Jone.",
            "Tell me the cartoons written by Todd Casey.",
            "Which countries' tv channels are playing some cartoon written by Todd Casey?"
        ],
        "queries": [
            "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
            "SELECT Title FROM Cartoon WHERE Written_by = \"Todd Casey\"",
            "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Todd Casey'"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "which countries' tv channels are playing some cartoon written by Steven Melching?",
            "which countries' tv channels are not playing any cartoon written by Todd Casey?"
        ],
        "queries": [
            "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by  =  'Steven Melching'",
            "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Tell me the director of the cartoon titled \"Deep Cover for Batman!\".",
            "I want to know this cartoon's production code.",
            "Tell me the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang."
        ],
        "queries": [
            "SELECT Directed_by FROM Cartoon WHERE Title = \"Deep Cover for Batman!\"",
            "SELECT Production_code FROM Cartoon WHERE Title = \"Deep Cover for Batman!\"",
            "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "tell me the country of the TV channel with series named \"MTV Music\"",
            "Tell me the number of Italian channels.",
            "find id of the tv channels that from the countries where have more than two tv channels."
        ],
        "queries": [
            "SELECT Country FROM TV_Channel WHERE series_name = \"MTV Music\"",
            "SELECT COUNT(*) FROM TV_Channel WHERE Country = \"Italy\"",
            "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Who is the director of the cartoon titled \"Return of the Fearsome Fangs!\"?",
            "Tell me the cartoons directed by Ben Jones.",
            "Find the id of tv channels that do not play any cartoon directed by Ben Jones."
        ],
        "queries": [
            "SELECT Directed_by FROM Cartoon WHERE Title = \"Return of the Fearsome Fangs!\"",
            "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\"",
            "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
        ],
        "serialized_schema": " | tvshow | tv_channel : id , series_name , country , language , content , pixel_aspect_ratio_par , hight_definition_tv , pay_per_view_ppv , package_option | tv_series : id , episode , air_date , rating , share , 18_49_rating_share , viewers_m , weekly_rank , channel | cartoon : id , title , directed_by , written_by , original_air_date , production_code , channel"
    },
    {
        "question": [
            "Show all the poker players.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM poker_player",
            "SELECT count(*) FROM poker_player"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What is the earnings of each poker player?",
            "Sort them in descending order."
        ],
        "queries": [
            "SELECT Earnings FROM poker_player",
            "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Show all the information about each poker player.",
            "What are their final table mades?",
            "What are their final table mades and best finishes?"
        ],
        "queries": [
            "SELECT * FROM poker_player",
            "SELECT Final_Table_Made FROM poker_player",
            "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What is the earnings of each poker player?",
            "Give me the average."
        ],
        "queries": [
            "SELECT Earnings FROM poker_player",
            "SELECT avg(Earnings) FROM poker_player"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What is the money rank of each poker player?",
            "Sort them in the decreasing order.",
            "Return the top one."
        ],
        "queries": [
            "SELECT Money_Rank FROM poker_player",
            "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC",
            "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Which poker player has earnings less than 200000?",
            "Among them, what is the maximum number of final tables made?"
        ],
        "queries": [
            "SELECT * FROM poker_player WHERE Earnings  <  200000",
            "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Show all the poker players.",
            "What are their names?"
        ],
        "queries": [
            "SELECT * FROM poker_player",
            "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Which poker players have earnings higher than 300000?",
            "What are their names?"
        ],
        "queries": [
            "SELECT * FROM poker_player WHERE Earnings  >  300000",
            "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What are the names of all poker players?",
            "Sort them in the ascending order of the final tables made."
        ],
        "queries": [
            "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
            "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What is the birth date of each poker player?",
            "Sort the list by the poker player's earnings.",
            "Give me the result for the player with the lowest earnings."
        ],
        "queries": [
            "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
            "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings",
            "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What is the height of each poker player?",
            "Who has the largest height?",
            "What is his or her money rank?"
        ],
        "queries": [
            "SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
            "SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
            "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What is the height of each poker player?",
            "Who all have heights greater than 200?",
            "What is the average earnings among them?"
        ],
        "queries": [
            "SELECT Height FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
            "SELECT * FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
            "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Sort all the poker players in descending order of earnings.",
            "What are the names of poker players in descending order of earnings?"
        ],
        "queries": [
            "SELECT * FROM poker_player ORDER BY Earnings DESC",
            "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Show the nationality of each person.",
            "Group people by their nationality.",
            "For each of the result, show the corresponding number of people of that nationality?"
        ],
        "queries": [
            "SELECT Nationality FROM people",
            "SELECT * FROM people GROUP BY Nationality",
            "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Show the nationality of each person.",
            "Count the number of people for each nationality.",
            "What is the most common nationality of people?"
        ],
        "queries": [
            "SELECT Nationality FROM people",
            "SELECT COUNT(*) FROM people GROUP BY Nationality",
            "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Count the number of people for each nationality.",
            "Which nationalities are held by at least two people?"
        ],
        "queries": [
            "SELECT COUNT(*) FROM people GROUP BY Nationality",
            "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What are the names and birth dates of people?",
            "Sort the results in ascending alphabetical order of name."
        ],
        "queries": [
            "SELECT Name ,  Birth_Date FROM people",
            "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What are the names of all people?",
            "What about people whose nationality is not \"Russia\"?"
        ],
        "queries": [
            "SELECT Name FROM people",
            "SELECT Name FROM people WHERE Nationality != \"Russia\""
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "Show all the poker players.",
            "Show all people who are not poker players.",
            "Give me their names."
        ],
        "queries": [
            "SELECT * FROM poker_player",
            "SELECT * FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
            "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
        ],
        "serialized_schema": " | poker_player | poker_player : poker_player_id , people_id , final_table_made , best_finish , money_rank , earnings | people : people_id , nationality , name , birth_date , height"
    },
    {
        "question": [
            "What are the death tolls each time?",
            "What is the maximum number of deaths in any one time?",
            "What about the minimum?",
            "Give me the maximum and also the minimum."
        ],
        "queries": [
            "SELECT killed FROM death",
            "SELECT max(killed) FROM death",
            "SELECT min(killed) FROM death",
            "SELECT max(killed) ,  min(killed) FROM death"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "Show me information about deaths caused by ships.",
            "Only ships with tonnage 't'.",
            "Only return the death and injury information for those ships."
        ],
        "queries": [
            "SELECT * FROM death as T1 JOIN ship as T2 ON T1.caused_by_ship_id  =  T2.id",
            "SELECT * FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
            "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS T2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "What are the ids and names of the battles?",
            "Only show those that ships were lost in.",
            "Please, just the ones with 'Brig' ship type."
        ],
        "queries": [
            "SELECT id, name FROM battle",
            "SELECT DISTINCT T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle",
            "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "How many people were killed or injured in each battle?",
            "Only show the deaths for those battles that produced at least ten deaths."
        ],
        "queries": [
            "SELECT T1.id ,  T1.name, sum(T3.killed), sum(T3.injured) FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id",
            "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "List the injuries caused by each ship (give ship id and name please).",
            "Sort it by decreasing number of injuries.",
            "Only show the ship id and name that caused the most total injuries."
        ],
        "queries": [
            "SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id",
            "SELECT T2.id ,  T2.name, sum(T1.injured) FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured)",
            "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.injured) DESC LIMIT 1"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "Which battles did the bulgarian commander 'Kaloyan' fight in?",
            "How about the latin commander 'Baldwin I'?",
            "Just the ones where they were fighting one another, please."
        ],
        "queries": [
            "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan'",
            "SELECT name FROM battle WHERE latin_commander  =  'Baldwin I'",
            "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "Which battle ids lost ships with tonnage '225'?",
            "Give the names of these battles, too.",
            "Which battle ids and names did not lose any ship with tonnage '225'?",
            "How many is that?"
        ],
        "queries": [
            "SELECT lost_in_battle FROM ship WHERE tonnage  =  '225'",
            "SELECT T2.id, T2.name from ship AS T1 join battle AS T2 ON T1.lost_in_battle = T2.id WHERE tonnage  =  '225'",
            "SELECT id, name FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
            "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "List the name and date of the battle that has lost the ship named 'Lettice'",
            "Same for 'HMS Atlanta', please.",
            "Can you intersect those?"
        ],
        "queries": [
            "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice'",
            "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atlanta'",
            "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "Which battle ids and names lost ships in the 'English Channel'?",
            "Which did not?",
            "For these ones, show their names, results, and bulgarian commanders."
        ],
        "queries": [
            "SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
            "SELECT T1.id, T1.name FROM battle EXCEPT SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
            "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
        ],
        "serialized_schema": " | battle_death | battle : id , name , date , bulgarian_commander , latin_commander , result | ship : lost_in_battle , id , name , tonnage , ship_type , location , disposition_of_ship | death : caused_by_ship_id , id , note , killed , injured"
    },
    {
        "question": [
            "How many continents are there?",
            "Show all their ids and names!",
            "What countries do they each have?",
            "Count how many there are for each continent name and id!"
        ],
        "queries": [
            "SELECT count(*) FROM CONTINENTS;",
            "SELECT ContId ,  Continent FROM CONTINENTS;",
            "SELECT T1.ContId ,  T1.Continent , * FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent;",
            "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are the names and ids of the different car makers?",
            "What countries are they each from?",
            "For each, how many models do they each produce?",
            "Can actually just show the name, id and the number of models?"
        ],
        "queries": [
            "Select FullName, ID From CAR_MAKERS;",
            "Select Country, FullName, ID From CAR_MAKERS;",
            "SELECT count(*), T1.Country, T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
            "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is the average horsepower of all cars?",
            "How about the maximum?",
            "What about the minimum?",
            "What is the model of the car with this horsepower?"
        ],
        "queries": [
            "Select avg(horsepower) FROM CARS_DATA;",
            "SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower DESC LIMIT 1;",
            "SELECT T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;",
            "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is the average weight of all the cars?",
            "List all the car information with weights above this?",
            "How about below this?",
            "Please, show just their model names!"
        ],
        "queries": [
            "SELECT avg(Weight) FROM CARS_DATA",
            "SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  >  (SELECT avg(Weight) FROM CARS_DATA)",
            "SELECT * FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)",
            "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are the ids, and models of the cars were made in 1970?",
            "Show their horsepower and MPG as well?",
            "Also provide the names of their makers!",
            "Just show a unique list of all these different makers."
        ],
        "queries": [
            "Select T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';",
            "Select T1.horsepower, T1.mpg, T1.id, T2.model from cars_data as T1 join car_names as T2 on T1.id = T2.MakeId where T1.year = '1970';",
            "SELECT T1.Maker, T4.horsepower, T4.mpg, T4.id, T2.model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';",
            "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show me the makes and models of each car!",
            "Also provide which the year they were produced?",
            "Which ones been produce in the earliest year?",
            "Show just the make and year!"
        ],
        "queries": [
            "SELECT Make , Model from Car_Names;",
            "SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId;",
            "SELECT T2.Make , T2.Model, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",
            "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are all the different car models?",
            "Show also all the car makes and the years that they were produced!",
            "Show only those that were made after 1980!",
            "What are the distinct car models for these?"
        ],
        "queries": [
            "SELECT DISTINCT model FROM MODEL_LIST;",
            "SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id;",
            "SELECT T1.model, T2.Make, T3.Year FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;",
            "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are the names and country name of each car maker?",
            "Also provide the continent name for each!",
            "How many car makers are there per continent?"
        ],
        "queries": [
            "Select T1.Maker, T2.CountryName from Car_Makers as T1 JOIN Countries as T2 on T1.Country = T2.CountryId;",
            "SELECT T1.Continent,  T3.Maker, T2.CountryName FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country;",
            "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "How many countries are there?",
            "How many car makers belong to each one?",
            "What is the name of the country that has the least number?",
            "How about the most?"
        ],
        "queries": [
            "SELECT count(*) from Countries;",
            "SELECT *, count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country;",
            "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) ASC LIMIT 1;",
            "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "How many makers are there?",
            "What are their full names and ids?",
            "What models have they each produced?",
            "Count how many modes there are per maker."
        ],
        "queries": [
            "Select Count(*) FROM CAR_MAKERS;",
            "SELECT FullName, id FROM CAR_MAKERS;",
            "SELECT T1.Model ,  T2.FullName, T2.id  FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id;",
            "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all the car ids with the make amc hornet sporabout (sw)?",
            "What is its horsepower?",
            "How about its MPG?",
            "How about its accelerate?"
        ],
        "queries": [
            "SELECT T1.ID FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
            "SELECT T1.Horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
            "SELECT T1.MPG FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';",
            "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all the different car makers?",
            "What are the names of the countries they belong to?",
            "Show just the car makers from France!",
            "How many are there?"
        ],
        "queries": [
            "SELECT distinct Maker FROM CAR_MAKERS;",
            "SELECT T1.Maker, T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId;",
            "SELECT T1.Maker FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
            "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "How many car models are produced in total?",
            "How many in Germany?",
            "How about in Japan?",
            "How about the USA?"
        ],
        "queries": [
            "SELECT count(*) FROM MODEL_LIST;",
            "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'Germany';",
            "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'japan';",
            "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is all the car information for cars produced in 1974?",
            "Now, show me just the weight and cylinders of these cars.",
            "List just those with 8 cylinders!",
            "What is the smallest weight?"
        ],
        "queries": [
            "SELECT * FROM CARS_DATA WHERE YEAR  =  1974;",
            "SELECT Weight, Cylinders FROM CARS_DATA WHERE YEAR  =  1974;",
            "SELECT Weight, Cylinders FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974;",
            "SELECT Weight FROM CARS_DATA WHERE Cylinders  =  8 AND YEAR  =  1974 ORDER BY Weight ASC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are all the different country names?",
            "Which ones have no car makers?",
            "Which ones have at least one?",
            "Also provide the country id!"
        ],
        "queries": [
            "Select CountryName FROM COUNTRIES;",
            "Select CountryName FROM COUNTRIES where CountryID not in (Select Country from CAR_MAKERS);",
            "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
            "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all the car makers and their country name?",
            "Count how many there are per country name?",
            "Show just those from countries in the continent Europe.",
            "List the country names of those with at least 3 manufacturers!"
        ],
        "queries": [
            "SELECT T3.Maker, T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country;",
            "SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country GROUP BY T1.CountryName;",
            "SELECT T1.CountryName, count(*) FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName;",
            "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is the horsepower, make for each car!",
            "Show those with 8 cylinders!",
            "How about 3?",
            "Show the one with the maximum horsepower."
        ],
        "queries": [
            "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id;",
            "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  8;",
            "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3;",
            "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is id of the car with the max horsepower?",
            "How about with the max MPG?",
            "Show its make!",
            "Now show its model!"
        ],
        "queries": [
            "SELECT id FROM CARS_DATA ORDER BY horsepower DESC LIMIT 1;",
            "SELECT id FROM CARS_DATA ORDER BY mpg DESC LIMIT 1;",
            "SELECT T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;",
            "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is the average edispl of all cars?",
            "Can you show the average per car make?",
            "How about per car model?",
            "Show the average for the model volvo!"
        ],
        "queries": [
            "SELECT avg(edispl) FROM CARS_DATA;",
            "SELECT T1.Make, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Make;",
            "SELECT T1.Model, avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id group by T1.Model;",
            "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are all the different models for each car?",
            "What are the makes for each?",
            "How many makes are there for each?",
            "What is the model name with the most makes?"
        ],
        "queries": [
            "SELECT distinct Model from CAR_NAMES;",
            "SELECT Model, Make FROM CAR_NAMES;",
            "SELECT Model, count(*) FROM CAR_NAMES GROUP BY Model;",
            "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show the full names of all the different car makers?",
            "Also include the car models produced by each!",
            "Show me just those produced by the maker with full name American Motor Company!",
            "How many are there?"
        ],
        "queries": [
            "SELECT FullName FROM CAR_MAKERS;",
            "SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;",
            "SELECT T1.FullName, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
            "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is all the information for the makers that have designed at least 1 car model!",
            "Which ones have designed more than 1?",
            "How about more than 3?",
            "List just the full name and id!"
        ],
        "queries": [
            "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;",
            "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  1;",
            "SELECT * FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
            "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "How many different models has maker with full name General Motors produced?",
            "How many different models weigh over 3500 pounds?",
            "How many models have either of these features?",
            "Show me the distinct list of their model names!"
        ],
        "queries": [
            "SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id WHERE T3.FullName  =  'General Motors';",
            "SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T1.MakeId  =  T3.Id WHERE T3.weight > 3500;",
            "SELECT count(DISTINCT T2.Model) FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;",
            "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show the years and weight of all the cars!",
            "Show distinct years that the cars that weigh more than 3000 were produced!",
            "How about the different years for those that weight less than 4000.",
            "What are the distinct years, for the cars that are both?"
        ],
        "queries": [
            "SELECT Year, weight FROM CARS_DATA;",
            "SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight  >  3000;",
            "SELECT DISTINCT Year FROM CARS_DATA AS T1 WHERE Weight  <  4000;",
            "SELECT DISTINCT Year FROM CARS_DATA WHERE Weight  >  3000 AND Weight  <  4000;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is the lowest accelerate for any car?",
            "How about the highest?",
            "What is the ID, Make and Model of this car?",
            "Show just its horsepower."
        ],
        "queries": [
            "SELECT accelerate FROM CARS_DATA ORDER BY accelerate ASC LIMIT 1;",
            "SELECT accelerate FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;",
            "SELECT T1.ID, T2.Make, T2.Model FROM CARS_DATA as T1 JOIN CAR_NAMES as T2 ON T1.ID = T2.MakeID ORDER BY T1.accelerate DESC LIMIT 1;",
            "SELECT horsepower FROM CARS_DATA ORDER BY accelerate DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all the car information for any car of the model volvo!",
            "What is the car with the least accelerate?",
            "What is its horsepower?",
            "What about its number of cylinders?"
        ],
        "queries": [
            "SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo';",
            "SELECT * FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "SELECT T1.horsepower FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;",
            "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is largest horsepower of all cars?",
            "What is the accelerate of the car with this horsepower?",
            "What are the car ids of the cars with a greater accelerate than this?",
            "How many are there?"
        ],
        "queries": [
            "SELECT horsepower FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
            "SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1",
            "SELECT id FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );",
            "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are the names of the countries that have no car makers?",
            "Show me all the names of all the different countries outside of those!",
            "How many of these have more than 1 car maker?",
            "How about more than 2?"
        ],
        "queries": [
            "SELECT CountryName FROM COUNTRIES where CountryId not in (SELECT T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country);",
            "SELECT distinct T1.CountryName FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country;",
            "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  1 );",
            "SELECT COUNT(*) FROM ( SELECT T1.CountryId ,  COUNT(*) FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >  2 );"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all models and horsepowers of all cars!",
            "Now show just the ones with 4 cylinders.",
            "What is the model of that with the lowest horsepower?",
            "How about the greatest horsepower?"
        ],
        "queries": [
            "SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id;",
            "SELECT T1.Model, T2.horsepower FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4;",
            "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower ASC LIMIT 1;",
            "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What is the lowest horsepower of all cars?",
            "Show all the ids and makes of those with a horsepower greater than this!",
            "Which ones have 5 cylinders or less?",
            "How about 3 or less?"
        ],
        "queries": [
            "SELECT min(Horsepower) FROM CARS_DATA;",
            "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA);",
            "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 5;",
            "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <= 3;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show me the mpg, horsepower and accelerate for all the cars that were produced before 1980!",
            "Also include the cars that have 8 cylinders!",
            "What is the max horsepower for this group?",
            "how about the max mpg?"
        ],
        "queries": [
            "SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE YEAR  <  1980;",
            "SELECT mpg, horsepower, accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980;",
            "SELECT accelerate FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY accelerate DESC LIMIT 1;",
            "SELECT mpg FROM CARS_DATA WHERE Cylinders  =  8 OR YEAR  <  1980 ORDER BY mpg DESC LIMIT 1;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all the models that were built by the Ford Motor Company.",
            "What are all the models except those!",
            "Also provide the weights for all different makes for each of these models.",
            "List all the different models from these that have makes that are lighter than 3500!"
        ],
        "queries": [
            "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName = 'Ford Motor Company';",
            "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id where T2.FullName != 'Ford Motor Company';",
            "SELECT T1.model, T2.Make, T3.weight FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company'",
            "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "What are all the names of countries?",
            "Which ones have at least one car maker?",
            "Show me all of car names other than these!"
        ],
        "queries": [
            "SELECT CountryName FROM countries;",
            "SELECT distinct T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
            "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "Show all the car maker id, names, the models and makes they produce!",
            "How many model does each car maker produce? List the id and maker!",
            "Show me those that produce at least 2!",
            "For each of these, only show those that have more than 3 car makes!"
        ],
        "queries": [
            "SELECT T1.Id ,  T1.Maker, T2.Model FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker;",
            "SELECT T1.Id ,  T1.Maker, count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
            "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2;",
            "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
        ],
        "serialized_schema": " | car_1 | continents : contid , continent | countries : countryid , countryname , continent | car_makers : id , maker , fullname , country | model_list : modelid , maker , model | car_names : makeid , model , make | cars_data : id , mpg , cylinders , edispl , horsepower , weight , accelerate , year"
    },
    {
        "question": [
            "How many matches are there?",
            "What was the maximum length in minutes for the matches?",
            "Average?",
            "How about for the age of losers and winners?"
        ],
        "queries": [
            "SELECT count(*) FROM matches",
            "SELECT max(minutes) FROM matches",
            "SELECT avg(minutes) FROM matches",
            "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many distinct tourney names are there?",
            "Which ones have more than 20 matches?",
            "More than 10?"
        ],
        "queries": [
            "SELECT count(DISTINCT tourney_name) FROM matches",
            "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  20",
            "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many distinct winners played in 2013?",
            "Of those, how many also played in 2016.",
            "What are their names?"
        ],
        "queries": [
            "SELECT count(DISTINCT winner_name) FROM matches WHERE year = 2013",
            "SELECT count(*) FROM (SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016)",
            "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many matches were played?",
            "How many where the loser hand is L?",
            "How many played in year 2013 or 2016?"
        ],
        "queries": [
            "SELECT count(*) FROM matches",
            "SELECT count(*) FROM matches WHERE loser_hand = \"L\"",
            "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many players are there?",
            "Which ones won in the tourney WTA Championships? Give their last name and birth date.",
            "Give first name and country code instead.",
            "Which ones also won in the Australian Open?"
        ],
        "queries": [
            "SELECT count(*) FROM players",
            "SELECT T1.last_name, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships'",
            "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships'",
            "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "What is the birth date of the oldest player?",
            "Give the player id and last name instead.",
            "Give the first name and country code instead."
        ],
        "queries": [
            "SELECT birth_date FROM players ORDER BY birth_date DESC LIMIT 1",
            "SELECT player_id ,  last_name FROM players ORDER BY birth_date LIMIT 1",
            "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many players have right / R hand?",
            "Left / L hand?",
            "Give their country code and birth date.",
            "Order by their birth date, and give the first and last name instead."
        ],
        "queries": [
            "SELECT count(*) FROM players WHERE hand = 'R'",
            "SELECT count(*) FROM players WHERE hand = 'L'",
            "SELECT country_code ,  birth_date FROM players WHERE hand  =  'L'",
            "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many players are there?",
            "How many tours did the player who did the least number of tours do?",
            "Most number of tours?",
            "Give the first name and country code instead."
        ],
        "queries": [
            "SELECT count(*) FROM players",
            "SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours ASC LIMIT 1",
            "SELECT T2.tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1",
            "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How many matches are there?",
            "Find the surface that has the most number.",
            "What about the year?"
        ],
        "queries": [
            "SELECT count(*) FROM matches",
            "SELECT surface FROM matches GROUP BY surface ORDER  BY count(*) DESC LIMIT 1",
            "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Find the name of the loser who lost the most times.",
            "Give the rank points as well.",
            "Give the same, but for the winner who won the most times."
        ],
        "queries": [
            "SELECT loser_name FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1",
            "SELECT loser_name, loser_rank_points FROM matches GROUP BY loser_name ORDER BY count(*) DESC LIMIT 1",
            "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Give the name of the loser who has the highest rank points.",
            "Do the same but for the Australian Open tourney.",
            "Give the winner name instead."
        ],
        "queries": [
            "SELECT loser_name FROM matches ORDER BY loser_rank_points DESC LIMIT 1",
            "SELECT loser_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY loser_rank_points DESC LIMIT 1",
            "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Give the length of the match in minutes of the shortest match.",
            "Longest match?",
            "Give the winner and loser name instead."
        ],
        "queries": [
            "SELECT minutes FROM matches ORDER BY minutes ASC LIMIT 1",
            "SELECT minutes FROM matches ORDER BY minutes DESC LIMIT 1",
            "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Find the birth dates of each of the players.",
            "Find tours and first name instead.",
            "Give the average ranking instead of the tours."
        ],
        "queries": [
            "SELECT birth_date FROM players",
            "SELECT T2.tours, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
            "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Give the number of tours for each player.",
            "Give the average rank points and first name.",
            "Find the total ranking points instead."
        ],
        "queries": [
            "SELECT tours FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
            "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name",
            "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Find the number of players for each country.",
            "Which country has the least number of players? Give the country code.",
            "Greatest number?"
        ],
        "queries": [
            "SELECT count(*) FROM players GROUP BY country_code",
            "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) ASC LIMIT 1",
            "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "What is the number of players for each hand type? Give the hand type as well.",
            "For each country?",
            "Give the ones that have more than 50 players.",
            "Give the country code only."
        ],
        "queries": [
            "SELECT count(*), hand FROM players GROUP BY hand",
            "SELECT count(*), country_code FROM players GROUP BY country_code",
            "SELECT count(*), country_code FROM players GROUP BY country_code HAVING count(*) > 50",
            "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "Give the name of the 3 oldest losers across all matches.",
            "How about the 3 oldest winners.",
            "Youngest? Give the rank as well."
        ],
        "queries": [
            "SELECT DISTINCT loser_name FROM matches ORDER BY loser_age DESC LIMIT 3",
            "SELECT DISTINCT winner_name FROM matches ORDER BY winner_age DESC LIMIT 3",
            "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "How  many different losers participated in the Australian Open?",
            "Winners?",
            "How about in the WTA Championships, and were also left handed?"
        ],
        "queries": [
            "SELECT count(DISTINCT loser_name) FROM matches WHERE tourney_name  =  'Australian Open'",
            "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'Australian Open'",
            "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
        ],
        "serialized_schema": " | wta_1 | players : player_id , first_name , last_name , hand , birth_date , country_code | matches : best_of , draw_size , loser_age , loser_entry , loser_hand , loser_ht , loser_id , loser_ioc , loser_name , loser_rank , loser_rank_points , loser_seed , match_num , minutes , round , score , surface , tourney_date , tourney_id , tourney_level , tourney_name , winner_age , winner_entry , winner_hand , winner_ht , winner_id , winner_ioc , winner_name , winner_rank , winner_rank_points , winner_seed , year | rankings : ranking_date , ranking , player_id , ranking_points , tours"
    },
    {
        "question": [
            "List all conductor information.",
            "How many conductors are there?"
        ],
        "queries": [
            "SELECT * FROM conductor",
            "SELECT count(*) FROM conductor"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "What are the names of the conductors?",
            "What are the ages of the conductors?",
            "List the names of conductors in ascending order of age."
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT Age FROM conductor",
            "SELECT Name FROM conductor ORDER BY Age ASC"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the names of conductors",
            "Among these conductors, which of them are not from the USA?"
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT Name FROM conductor WHERE Nationality != 'USA'"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the information of record companies.",
            "When were they founded?",
            "Please list the record companies of orchestras in descending order of years in which they were founded."
        ],
        "queries": [
            "SELECT Record_Company FROM orchestra",
            "SELECT Record_Company, Year_of_Founded FROM orchestra",
            "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "What is the attendance of each show?",
            "What is the average attendance?"
        ],
        "queries": [
            "SELECT Attendance FROM SHOW",
            "SELECT avg(Attendance) FROM SHOW"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "What are the shares of performances?",
            "What are the shares of performances whose type is not \"Live final\"?",
            "What are the maximum and the minimum of these values?"
        ],
        "queries": [
            "SELECT SHARE FROM performance",
            "SELECT SHARE FROM performance WHERE TYPE != \"Live final\"",
            "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the nationalities of conductors.",
            "How many are there?"
        ],
        "queries": [
            "SELECT Nationality FROM conductor",
            "SELECT count(DISTINCT Nationality) FROM conductor"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the names of conductors.",
            "List years of work of conductors.",
            "List names of conductors in descending order of years of work."
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT Year_of_Work FROM conductor",
            "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the names of the conductors.",
            "List years of work of conductors.",
            "List the name of the conductor with the most years of work."
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT Year_of_Work FROM conductor",
            "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Show the names of conductors.",
            "Please list these names with the orchestras they have conducted."
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Please show the names of the conductors.",
            "Which of them have conducted more than one orchestras?"
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Please show the names of the conductors.",
            "Who has conducted the most orchestras?"
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Please show the names of the conductors.",
            "Who has conducted orchestras founded after 2008?"
        ],
        "queries": [
            "SELECT Name FROM conductor",
            "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Please show the record companies without duplicates.",
            "Please also show their corresponding number of orchestras."
        ],
        "queries": [
            "SELECT Record_Company FROM orchestra GROUP BY Record_Company",
            "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Please show the record formats of orchestras.",
            "Please list them in ascending order of count."
        ],
        "queries": [
            "SELECT Major_Record_Format FROM orchestra",
            "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the information of all record companies.",
            "Which one is shared by the most orchestras?"
        ],
        "queries": [
            "SELECT Record_Company FROM orchestra",
            "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the names of orchestras.",
            "Which of them have had no performances?"
        ],
        "queries": [
            "SELECT Orchestra FROM orchestra",
            "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Please list the record companies.",
            "Which of them are shared by orchestras founded before 2003?",
            "Which of them are shared by orchestras founded after 2003?",
            "Which of them are shared by orchestras founded before 2003 and after 2003?"
        ],
        "queries": [
            "SELECT Record_Company FROM orchestra",
            "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003",
            "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
            "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "List the orchestras whose record format is \"CD\" or \"DVD\".",
            "How many of these orchestras are there?"
        ],
        "queries": [
            "SELECT * FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
            "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
        ],
        "serialized_schema": " | orchestra | conductor : conductor_id , name , age , nationality , year_of_work | orchestra : orchestra_id , orchestra , conductor_id , record_company , year_of_founded , major_record_format | performance : performance_id , orchestra_id , type , date , official_ratings_(millions) , weekly_rank , share | show : show_id , performance_id , if_first_show , result , attendance"
    },
    {
        "question": [
            "Show information for all documents.",
            "Show their ids.",
            "Also show their document names and document descriptions."
        ],
        "queries": [
            "SELECT * FROM Documents",
            "SELECT document_id FROM Documents",
            "SELECT document_id ,  document_name ,  document_description FROM Documents"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the document name for all documents.",
            "Also show their description.",
            "Which one has description with the letter 'w' in it?",
            "Show its name and template id."
        ],
        "queries": [
            "SELECT document_name FROM Documents",
            "SELECT document_name, Document_Description FROM Documents",
            "SELECT document_name FROM Documents WHERE Document_Description LIKE \"%w%\"",
            "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the the document name for all documents.",
            "Show the document id for the one named \"Robbin CV\"?",
            "Also show its template id and description."
        ],
        "queries": [
            "SELECT document_name from Documents",
            "SELECT document_id FROM Documents WHERE document_name  =  \"Robbin CV\"",
            "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template id for all documents.",
            "Show all distinct results.",
            "How many are there?"
        ],
        "queries": [
            "SELECT template_id FROM Documents",
            "SELECT DISTINCT template_id FROM Documents",
            "SELECT count(DISTINCT template_id) FROM Documents"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the document ids.",
            "Also show their template id and template type code.",
            "Which documents are using the template with type code 'PPT'?",
            "How many are there?"
        ],
        "queries": [
            "SELECT document_id FROM Documents",
            "SELECT T1.document_id, T2.Template_ID, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID",
            "SELECT T1.document_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID where T2.Template_Type_Code  =  'PPT'",
            "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template id for all documents.",
            "For each of them, show the number of documents using it."
        ],
        "queries": [
            "SELECT template_id FROM Documents",
            "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template id for all Documents.",
            "Also show its template type code.",
            "For each of them, show the number of documents using it.",
            "Which one has the most?"
        ],
        "queries": [
            "SELECT template_id FROM Documents",
            "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id",
            "SELECT count(*), T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id",
            "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template id for all documents.",
            "For each of them, show the number of documents.",
            "Which of them are used by more than one document?"
        ],
        "queries": [
            "SELECT template_id FROM Documents",
            "SELECT template_id, count(*) FROM Documents GROUP BY template_id",
            "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show template ids used by some document.",
            "Show all template ids.",
            "Which of them are not used by any document?"
        ],
        "queries": [
            "SELECT template_id FROM Documents",
            "SELECT template_id FROM Templates",
            "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show info for all templates.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM Templates",
            "SELECT count(*) FROM Templates"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show template ids for all templates.",
            "Also show their version numbers and template type codes."
        ],
        "queries": [
            "SELECT template_id FROM Templates",
            "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes for all templates.",
            "Filter out duplicates."
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT DISTINCT template_type_code FROM Templates"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template ids for all templates.",
            "How about the ids with template type code PP or PPT?"
        ],
        "queries": [
            "SELECT template_id FROM Templates",
            "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template type codes for all templates.",
            "How many of them have template type code CV?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "What is the version number for all template?",
            "Only show those with version number later than 5.",
            "Also show their template type code."
        ],
        "queries": [
            "SELECT version_number FROM Templates",
            "SELECT version_number FROM Templates WHERE version_number  >  5",
            "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template type code for all templates.",
            "For each of them, count the number of templates"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all type codes for templates.",
            "For each of them, how many templates do they contain?",
            "Which of them contains the most templates?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT template_type_code, count(*) FROM Templates GROUP BY template_type_code",
            "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes.",
            "For each of them, show the count of templates.",
            "Which of them have fewer than three templates?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT template_type_code, count(*) FROM Templates GROUP BY template_type_code",
            "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the version number for all templates.",
            "What is the smallest value?",
            "Also show its template type code."
        ],
        "queries": [
            "SELECT Version_Number FROM Templates",
            "SELECT min(Version_Number) FROM Templates",
            "SELECT min(Version_Number) ,  template_type_code FROM Templates"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "What is the template type code of the template.",
            "Also show the names of all documents using each template.",
            "Which of the template type codes is used by document with the name \"Data base\"?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT T1.template_type_code, T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
            "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all document names.",
            "Also show their template type codes.",
            "Which of the documents are using templates with template type code BK?"
        ],
        "queries": [
            "SELECT document_name FROM Documents",
            "SELECT T2.document_name, T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
            "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes.",
            "Also show the document ids using each template.",
            "For each type code, how many documents are using that template?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT T1.template_type_code , T2.document_id FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
            "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the type codes for all templates.",
            "For each, how many documents are using this template?",
            "Order the template type codes in descending order by this number.",
            "Which of them has the most?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT T1.template_type_code, count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
            "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes.",
            "Show all template type codes that are used by some document.",
            "How about those that are not used by any document?"
        ],
        "queries": [
            "SELECT template_type_code FROM Templates",
            "SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
            "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes.",
            "Also show their descriptions."
        ],
        "queries": [
            "SELECT template_type_code FROM Ref_template_types",
            "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes and descriptions.",
            "What is the description for template type code \"AD\"?"
        ],
        "queries": [
            "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
            "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all template type codes.",
            "Also show descriptions.",
            "Which code has template type description \"Book\"?"
        ],
        "queries": [
            "SELECT template_type_code FROM Ref_template_types",
            "SELECT template_type_code , template_type_description FROM Ref_template_types",
            "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template ids used by any document.",
            "Also show the template type code for those ids.",
            "How about their template type descriptions?",
            "Show the distinct values among them."
        ],
        "queries": [
            "select Template_ID from Documents",
            "select T2.Template_ID, T1.template_type_code from Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID  =  T2.template_ID",
            "SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
            "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the template id for all templates.",
            "Also show their template type description.",
            "What are the template ids with description \"Presentation\"?"
        ],
        "queries": [
            "SELECT template_id from Templates",
            "SELECT T2.template_id, T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code",
            "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the info for all paragraphs.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM Paragraphs",
            "SELECT count(*) FROM Paragraphs"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the id for all paragraphs.",
            "Also show their document names.",
            "Only show the id for all paragraphs in the document named 'Summer Show'.",
            "How many such paragraphs are there?"
        ],
        "queries": [
            "SELECT paragraph_id FROM Paragraphs",
            "SELECT T1.paragraph_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID",
            "SELECT T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
            "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the parapraph text for all paragraphs.",
            "Also show their paragraph details.",
            "What are the details for the paragraph containing 'Korea'?"
        ],
        "queries": [
            "SELECT paragraph_text FROM Paragraphs",
            "SELECT Other_Details, paragraph_text FROM Paragraphs",
            "SELECT Other_Details FROM Paragraphs WHERE paragraph_text  =  'Korea'"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all paragraph ids and texts.",
            "For each of them, also show their document name.",
            "What are the ids and texts for the paragraph in the document with name 'Welcome to NY'?"
        ],
        "queries": [
            "SELECT paragraph_id ,  paragraph_text FROM Paragraphs",
            "SELECT T1.paragraph_id ,   T1.paragraph_text, T2.Document_Name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id",
            "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all paragraph text.",
            "For each of them, also show the document name.",
            "What is the text for the document \"Customer reviews\"?"
        ],
        "queries": [
            "SELECT paragraph_text FROM Paragraphs",
            "SELECT T1.paragraph_text, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id",
            "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the document id for all paragraphs.",
            "For each id, show the number of paragraphs.",
            "Order by document id."
        ],
        "queries": [
            "SELECT document_id FROM Paragraphs",
            "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id",
            "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show all document ids and names.",
            "For each of them, count the number of paragraphs in each document."
        ],
        "queries": [
            "SELECT document_id ,  document_name FROM Documents",
            "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the document id for all paragraphs.",
            "For each of these document ids, count the number of paragraphs.",
            "Which of them have at least two paragraphs?"
        ],
        "queries": [
            "SELECT document_id FROM Paragraphs",
            "SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id",
            "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the id number and name for all documents.",
            "Also show the paragraph id for those documents.",
            "For each of these results, count the number of paragraphs.",
            "Which of them is the longest?"
        ],
        "queries": [
            "SELECT document_id ,  document_name FROM Documents",
            "SELECT T1.document_id ,  T2.document_name , T1.paragraph_id FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id",
            "SELECT T1.document_id ,  T2.document_name , count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
            "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the document id for all paragraphs.",
            "For each of them, count the number of paragraphs.",
            "Sort them by these counts.",
            "Which has the fewest?"
        ],
        "queries": [
            "SELECT document_id FROM Paragraphs",
            "SELECT document_id , count(*) FROM Paragraphs GROUP BY document_id",
            "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*)",
            "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show the document id for all paragraphs.",
            "For each of these ids, show the number of paragraphs.",
            "Which of them have between 1 and 2 paragraphs?"
        ],
        "queries": [
            "SELECT document_id FROM Paragraphs",
            "SELECT document_id, count(*) FROM Paragraphs GROUP BY document_id",
            "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
        ],
        "serialized_schema": " | cre_Doc_Template_Mgt | ref_template_types : template_type_code , template_type_description | templates : template_id , version_number , template_type_code , date_effective_from , date_effective_to , template_details | documents : document_id , template_id , document_name , document_description , other_details | paragraphs : paragraph_id , document_id , paragraph_text , other_details"
    },
    {
        "question": [
            "Show information for all singers.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM singer",
            "SELECT count(*) FROM singer"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show names of all singers.",
            "For each of them, also show country and age.",
            "List the results in descending order of their age."
        ],
        "queries": [
            "SELECT name FROM singer",
            "SELECT name ,  country ,  age FROM singer",
            "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show age for all singers.",
            "What about age for those from France?",
            "What is the average, minimum, and maximum age for those?"
        ],
        "queries": [
            "select age from singer",
            "select age from singer WHERE country  =  'France'",
            "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the names of all songs.",
            "Also show the release year for each of them.",
            "Order the result by the age of their singers.",
            "What is the result for the song by the yongest?"
        ],
        "queries": [
            "select song_name from singer",
            "SELECT song_name ,  song_release_year FROM singer",
            "SELECT song_name ,  song_release_year FROM singer ORDER BY age",
            "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show country for all singers.",
            "Only show the results for those above 20.",
            "What are all distinct countries for them?"
        ],
        "queries": [
            "SELECT country FROM singer",
            "SELECT country FROM singer WHERE age  >  20",
            "SELECT DISTINCT country FROM singer WHERE age  >  20"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the country for all singers.",
            "For each of them, what is the number of singers?"
        ],
        "queries": [
            "SELECT country FROM singer",
            "SELECT country ,  count(*) FROM singer GROUP BY country"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "What is the average age for all singers?",
            "Show the name for songs by singers older than that."
        ],
        "queries": [
            "SELECT avg(age) FROM singer",
            "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the name for all stadiums.",
            "What about those with a capacity between 5000 and 10000?",
            "Also list the location for them."
        ],
        "queries": [
            "SELECT name FROM stadium",
            "SELECT name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
            "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the capacity for all stadiums.",
            "What is the average of them?",
            "Also show the maximum."
        ],
        "queries": [
            "select capacity FROM stadium",
            "SELECT avg(capacity) FROM stadium",
            "SELECT avg(capacity) ,  max(capacity) FROM stadium"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the name and capacity for all stadiums.",
            "Show the result in descending order of their average attendance.",
            "Which one has the highest?"
        ],
        "queries": [
            "SELECT name ,  capacity FROM stadium",
            "SELECT name ,  capacity FROM stadium ORDER BY average DESC",
            "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the concert information in year 2014.",
            "Also show those in year 2015.",
            "How many are there in total?"
        ],
        "queries": [
            "SELECT * FROM concert WHERE YEAR  =  2014",
            "SELECT * FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
            "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the names of stadiums.",
            "For each of them, also show the number of concerts."
        ],
        "queries": [
            "SELECT name from stadium",
            "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show all stadium names and their capacities.",
            "Order the results in descending order of the number of concerts in year 2014 or after.",
            "Which one has the most?"
        ],
        "queries": [
            "SELECT name ,  capacity FROM stadium",
            "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC",
            "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the year for all concerts.",
            "Order them in descending order of the number of concerts",
            "Which year has the most?"
        ],
        "queries": [
            "SELECT YEAR FROM concert",
            "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC",
            "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show all stadium ids of concerts.",
            "Show the stadium names without any concert."
        ],
        "queries": [
            "SELECT stadium_id FROM concert",
            "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the country for all singers.",
            "How about those for singers above age 40?",
            "How about those for singers below 30?",
            "How about countries with both?"
        ],
        "queries": [
            "SELECT country FROM singer",
            "SELECT country FROM singer WHERE age  >  40",
            "SELECT country FROM singer WHERE age  <  30",
            "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show name for stadiums that had a concert in year 2014.",
            "Show names for all stadiums except for those."
        ],
        "queries": [
            "SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
            "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the name and theme for all concerts.",
            "For each of those, also show the number of singers."
        ],
        "queries": [
            "SELECT concert_name ,  theme from concert",
            "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the name for all singers.",
            "For each of them, also show the number of concerts"
        ],
        "queries": [
            "SELECT name FROM singer",
            "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "List all singer names.",
            "How about those performing concerts in year 2014?"
        ],
        "queries": [
            "select name from singer",
            "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "What are the names of all singers?",
            "Show the names for those having a song having 'Hey' in its name.",
            "Also show the nation for those singers."
        ],
        "queries": [
            "SELECT name FROM singer",
            "SELECT name FROM singer WHERE song_name LIKE '%Hey%'",
            "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the name and location for the stadiums.",
            "How about those with some concerts happened in the year 2014?",
            "Among those, what are stadiums also holding some concerts in the year 2015?"
        ],
        "queries": [
            "SELECT name ,  location FROM stadium",
            "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014",
            "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
        ],
        "serialized_schema": " | concert_singer | stadium : stadium_id , location , name , capacity , highest , lowest , average | singer : singer_id , name , country , song_name , song_release_year , age , is_male | concert : concert_id , concert_name , theme , stadium_id , year | singer_in_concert : concert_id , singer_id"
    },
    {
        "question": [
            "Show the names and birth years of singers",
            "Only for the ones born in 1948.",
            "Show the name of singers whose birth year is either 1948 or 1949?"
        ],
        "queries": [
            "SELECT Name, Birth_Year from singer",
            "SELECT Name, Birth_Year from singer WHERE Birth_Year = 1948",
            "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "Show the name and net worth of the singers.",
            "Order by richest first.",
            "What is the name of the singer with the largest net worth?"
        ],
        "queries": [
            "SELECT Name, Net_Worth_Millions FROM singer",
            "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC",
            "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "Show the names and citizenships of singers.",
            "Show citizenship counts.",
            "Sort that by most common first.",
            "Limit it to one."
        ],
        "queries": [
            "SELECT Name, Citizenship FROM singer",
            "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
            "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
            "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "Join singer names with their song titles.",
            "Limit the entries to where song sales exceed 300000.",
            "Which are the distinct names in that list?"
        ],
        "queries": [
            "SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID",
            "SELECT t1.name, t2.title from singer as t1 join song as t2 on t1.Singer_ID = t2.Singer_ID WHERE t2.Sales > 300000",
            "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "Show the names and song counts of singers.",
            "Show the names of singers that have more than one song."
        ],
        "queries": [
            "SELECT T1.Name, COUNT(*) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
            "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "Show the songs and sale amounts.",
            "Show the names of singers and the total sales of their songs."
        ],
        "queries": [
            "SELECT title, Sales from song",
            "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "Which singer ids have at least one song?",
            "Which singer names do not?"
        ],
        "queries": [
            "SELECT DISTINCT Singer_ID from song",
            "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
        ],
        "serialized_schema": " | singer | singer : singer_id , name , birth_year , net_worth_millions , citizenship | song : song_id , title , singer_id , sales , highest_position"
    },
    {
        "question": [
            "find all employees who are under age 30.",
            "Which cities did they come from?",
            "show the cities from which more than one employee originated."
        ],
        "queries": [
            "SELECT * FROM employee WHERE age  <  30",
            "SELECT city FROM employee WHERE age  <  30",
            "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "show all shops.",
            "what is the total number of products they are selling?",
            "find the name of the shop with the greatest number of products.",
            "what are its manager name and district?"
        ],
        "queries": [
            "SELECT * FROM shop",
            "SELECT sum(number_products) FROM shop",
            "SELECT name FROM shop ORDER BY number_products DESC LIMIT 1",
            "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "find the average number of products of all stores.",
            "how about the minimum and maximum?"
        ],
        "queries": [
            "SELECT avg(Number_products) FROM shop",
            "SELECT min(Number_products) ,  max(Number_products) FROM shop"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "show the name and number of product for all shops.",
            "what is the average number of products?",
            "Find the names of stores whose number products is less than the average.",
            "how about more than?"
        ],
        "queries": [
            "SELECT name, number_products FROM shop",
            "SELECT avg(number_products) FROM shop",
            "SELECT name FROM shop WHERE number_products  <  (SELECT avg(number_products) FROM shop)",
            "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "how many evaluations are there?",
            "what years were they given?",
            "find the name of the employee who received the most evaluation awards."
        ],
        "queries": [
            "SELECT count(*) FROM evaluation",
            "SELECT Year_awarded FROM evaluation",
            "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "find the name of the employees who received past evaluation awards.",
            "who won the most times?",
            "ok, which one received the award with the highest bonus?"
        ],
        "queries": [
            "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID",
            "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY T2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1",
            "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "find the number of different employees who were awarded in the past evaluations.",
            "what are their names?",
            "show the names of the employees who never won."
        ],
        "queries": [
            "SELECT count(distinct Employee_ID) FROM evaluation",
            "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID",
            "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "how many shops are hiring?",
            "what are the shops' names?'",
            "which one is hiring the largest number of employees?"
        ],
        "queries": [
            "SELECT count(distinct Shop_ID) FROM hiring",
            "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id",
            "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "show all hiring info.",
            "Find the names of any shops not hiring."
        ],
        "queries": [
            "SELECT * FROM hiring",
            "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "how many employees are being hired in all shops?",
            "show the number for each shop. show the shop name as well."
        ],
        "queries": [
            "SELECT count(*) FROM hiring",
            "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
        ],
        "serialized_schema": " | employee_hire_evaluation | employee : employee_id , name , age , city | shop : shop_id , name , location , district , number_products , manager_name | hiring : shop_id , employee_id , start_from , is_full_time | evaluation : employee_id , year_awarded , bonus"
    },
    {
        "question": [
            "show all visitors.",
            "order them by their membership level from high to low.",
            "just show their names.",
            "do not list those whose membership level is lower than or equal to 4."
        ],
        "queries": [
            "SELECT * FROM visitor",
            "SELECT * FROM visitor ORDER BY Level_of_membership DESC",
            "SELECT name FROM visitor ORDER BY Level_of_membership DESC",
            "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "find the number of visitors with a membership level higher than 4.",
            "what are their names and membership levels?",
            "sort by their age from old to young."
        ],
        "queries": [
            "SELECT count(*) FROM visitor WHERE Level_of_membership  >  4",
            "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4",
            "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "how many museums are in the table?",
            "what is the average number of staff working in these museums?",
            "Find the name of the museum that has the most staff members.",
            "what is its id?"
        ],
        "queries": [
            "SELECT count(*) FROM museum",
            "SELECT avg(num_of_staff) FROM museum",
            "SELECT name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
            "SELECT museum_id FROM museum ORDER BY num_of_staff DESC LIMIT 1"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "find the names of museums opened before 2010.",
            "how about after?",
            "find the minimum number of staff of those museums.",
            "find the names of museums which have more staff than that."
        ],
        "queries": [
            "SELECT name FROM museum WHERE open_year  <  2010",
            "SELECT name FROM museum WHERE open_year  >  2010",
            "SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010",
            "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "find the names of visitors who visited and who have some museum visit records.",
            "which of them visited some museums more than once?",
            "also show their ids and ages."
        ],
        "queries": [
            "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id",
            "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
            "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "what is the total spent on all visits?",
            "find the name of the visitor who has spent the most money for his or her visits.",
            "what are his id and membership level?"
        ],
        "queries": [
            "SELECT sum(Total_spent) FROM visit",
            "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
            "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "show the id and name of all museums.",
            "show the number of tickets sold for each of them.",
            "which one was visited the most times?"
        ],
        "queries": [
            "SELECT Museum_ID, name FROM museum",
            "SELECT t2.Museum_ID ,  t1.name, count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID",
            "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "how many museums are there?",
            "how many of them have not had any visitors yet?",
            "what are their names?"
        ],
        "queries": [
            "SELECT count(*) FROM museum",
            "SELECT count(*) FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
            "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "how many tickets were sold from all of the museums?",
            "find the id of the visitor who bought the most tickets at once.",
            "Find the name and age of this visitor."
        ],
        "queries": [
            "SELECT sum(num_of_ticket) FROM visit",
            "SELECT visitor_id FROM visit ORDER BY num_of_ticket DESC LIMIT 1",
            "SELECT t1.name,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "find the total cost of all visits.",
            "what was the amount of the largest one time purchase of tickets out of all visits?",
            "how about the average and maximum number of tickets purchased?"
        ],
        "queries": [
            "SELECT sum(Total_spent) FROM visit",
            "SELECT max(Total_spent) FROM visit",
            "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "what is the lowest level of membership?",
            "find the number of visitors whose membership level is 1.",
            "show the ticket expenses of all of their museum visits.",
            "what is the total amount of money spent?"
        ],
        "queries": [
            "SELECT min(Level_of_membership) FROM visitor",
            "SELECT count(*) FROM visitor WHERE Level_of_membership  =  1",
            "SELECT t2.Total_spent FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
            "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "find the names of museums opened before 2009.",
            "what about those opened after 2011?",
            "What is the name of the visitor who visited both groups of museums?"
        ],
        "queries": [
            "SELECT name FROM museum WHERE open_year  <  2009",
            "SELECT name FROM museum WHERE open_year > 2011",
            "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "find the names of museums opened after 2010",
            "find the number of visits to these museums?",
            "Find the number of visitors who did not visit these museums."
        ],
        "queries": [
            "SELECT name FROM museum WHERE open_year  >  2010",
            "SELECT count(*) FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010",
            "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
        ],
        "serialized_schema": " | museum_visit | museum : museum_id , name , num_of_staff , open_year | visitor : id , name , level_of_membership , age | visit : museum_id , visitor_id , num_of_ticket , total_spent"
    },
    {
        "question": [
            "How many high schoolers are there?",
            "How many in each grade 11 or 12?",
            "How many in grade 9 or 10?"
        ],
        "queries": [
            "SELECT count(*) FROM Highschooler",
            "SELECT count(*) FROM Highschooler WHERE grade  =  11 OR grade  =  12",
            "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "How many distinct grades are there?",
            "What are they?",
            "Which one has the least number of highschoolers?",
            "Which one has the most?"
        ],
        "queries": [
            "SELECT count(distinct grade) FROM Highschooler",
            "SELECT distinct grade FROM Highschooler",
            "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) ASC LIMIT 1",
            "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "How many highschoolers are there in total?",
            "How many per grade?",
            "What grades have at least 10 students?",
            "How about at least 4?"
        ],
        "queries": [
            "SELECT count(*) FROM Highschooler",
            "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
            "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  10",
            "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "What are the names of all the high school students?",
            "Show the names of the friends for each one.",
            "How many friends does each student each have?"
        ],
        "queries": [
            "SELECT name FROM highschooler",
            "SELECT T2.name, T3.name FROM friend as T1 join highschooler as T2  on friend_id = T2.ID join highschooler as T3 on student_id = T3.ID",
            "SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "What are the names of all the high schoolers?",
            "Show me the number of friends for each one.",
            "Which one has the least number of friends?",
            "How about the greatest?"
        ],
        "queries": [
            "SELECT name FROM highschooler",
            "SELECT T2.name, count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) ASC LIMIT 1",
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "How many highschoolers have more than 5?",
            "at least 3?",
            "What are their names?"
        ],
        "queries": [
            "SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  > 5)",
            "SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 3)",
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Show me information on the high schooler named \"Kyle.\"",
            "How many friends does he have?",
            "What are their names?"
        ],
        "queries": [
            "SELECT * FROM highschooler where name = \"Kyle\"",
            "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
            "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Is there a highschooler named Kyle?",
            "Who does he like?",
            "What are the names of his friends?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM highschooler where name = \"Kyle\"",
            "SELECT T3.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.liked_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
            "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
            "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Show me all the high school student ids.",
            "How many friends do each of them have?",
            "Which ones have at least 1?",
            "Which ones have none?"
        ],
        "queries": [
            "SELECT ID FROM highschooler",
            "SELECT student_id, count(*) FROM friend group by student_id",
            "SELECT student_id FROM Friend",
            "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "What are the names of all the highshcool students?",
            "Which ones have at least 5 friends?",
            "how about at least 1?",
            "how about 0?"
        ],
        "queries": [
            "SELECT name FROM highschooler",
            "SELECT count(*) FROM (SELECT * FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >= 5)",
            "SELECT distinct T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
            "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Show me the ids of all highschoolers who have friends?",
            "Also show, for each, the ids of the people they like?",
            "Now only show those who are liked by someone else!",
            "Show me just their ids!"
        ],
        "queries": [
            "SELECT student_id FROM Friend",
            "SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id",
            "SELECT distinct T1.student_id, T2.liked_id FROM Friend as T1 JOIN Likes as T2 ON T1.student_id = T2.student_id where T1.student_id in (SELECT liked_id FROM Likes)",
            "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "How many high schoolers are liked by someone else?",
            "What are their names?",
            "How many of them have friends?",
            "Who are they?"
        ],
        "queries": [
            "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
            "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
            "SELECT count (*) FROM (SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id)",
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "What are the names of the highschoolers who don't like anyone?",
            "How about those who like others?",
            "How many people do they each like?"
        ],
        "queries": [
            "SELECT name FROM Highschooler where ID not in (SELECT student_id FROM Likes)",
            "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
            "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "How many high schoolers like somebody else?",
            "What are their names?",
            "what is the greatest number of likes anyone has?",
            "who has the greatest number of likes?"
        ],
        "queries": [
            "SELECT count(distinct student_id) FROM likes",
            "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
            "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
            "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Show me the names of all students?",
            "How about those who like at least one other person!",
            "How about those who like at least two other students!"
        ],
        "queries": [
            "SELECT name FROM highschooler",
            "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  1",
            "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "What are the names of the students who have some friends?",
            "How about those have at least 2 friends?",
            "What grades are they each in?",
            "Show me the names of only those who are in a grade higher than 5!"
        ],
        "queries": [
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
            "SELECT T2.name, T2.grade FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2",
            "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "What grade is the student named Kyle in?",
            "How many other students like him?",
            "What are their names?",
            "How many other students does he like?"
        ],
        "queries": [
            "SELECT grade FROM highschooler where name = \"Kyle\"",
            "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
            "SELECT T3.name  FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id JOIN Highschooler as T3 on T3.ID = T1.student_id WHERE T2.name  =  \"Kyle\"",
            "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Show me the student_id and the grade for all students.",
            "What is the average grade?",
            "How about for students who have no friends?",
            "How about for those who have some friends?"
        ],
        "queries": [
            "SELECT id, grade FROM highschooler",
            "SELECT avg(grade) FROM highschooler",
            "SELECT avg(grade) FROM Highschooler WHERE id not IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
            "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
        ],
        "serialized_schema": " | network_1 | highschooler : id , name , grade | friend : student_id , friend_id | likes : student_id , liked_id"
    },
    {
        "question": [
            "Show all the teachers.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM teacher",
            "SELECT count(*) FROM teacher"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "What is the name of each teacher?",
            "Sort them in ascending order of age."
        ],
        "queries": [
            "SELECT Name FROM teacher",
            "SELECT Name FROM teacher ORDER BY Age ASC"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "What is the age of each teacher?",
            "Also show the hometown for each."
        ],
        "queries": [
            "SELECT Hometown FROM teacher",
            "SELECT Age ,  Hometown FROM teacher"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "What is the hometown of each teacher?",
            "Which teacher's hometown is not \"Little Lever Urban District\"?",
            "Give me their names."
        ],
        "queries": [
            "SELECT Hometown FROM teacher",
            "SELECT * FROM teacher WHERE Hometown != \"Little Lever Urban Distric\"",
            "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban Distric\""
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "What are the ages of all the teachers?",
            "Which teachers are age 32?",
            "Which teachers are age 32 or 33?",
            "What are their names?"
        ],
        "queries": [
            "SELECT Age FROM teacher",
            "SELECT * FROM teacher WHERE Age  =  32",
            "SELECT * FROM teacher WHERE Age  =  32 OR Age  =  33",
            "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Sort all the teachers by their age.",
            "Which teacher is the youngest?",
            "What is his or her hometown?"
        ],
        "queries": [
            "SELECT * FROM teacher ORDER BY Age",
            "SELECT * FROM teacher ORDER BY Age ASC LIMIT 1",
            "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "What is the hometown of each teacher?",
            "Can you order teachers by their hometowns?",
            "Show the number of teachers from each hometown."
        ],
        "queries": [
            "SELECT Hometown FROM teacher",
            "SELECT * FROM teacher order BY Hometown",
            "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "How many teachers are there?",
            "How many are there for each hometown?",
            "Find the most common hometown of teachers."
        ],
        "queries": [
            "SELECT COUNT(*) FROM teacher",
            "SELECT COUNT(*) FROM teacher GROUP BY Hometown",
            "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "How many teachers are there?",
            "How many teachers are there for each hometown?",
            "Which hometowns are shared by at least two teachers?"
        ],
        "queries": [
            "SELECT COUNT(*) FROM teacher",
            "SELECT COUNT(*) FROM teacher GROUP BY Hometown",
            "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Find all the course arrangements.",
            "For each of the courses, show the teacher who teaches it."
        ],
        "queries": [
            "SELECT * FROM course_arrange",
            "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Find all the course arrangements.",
            "Show names of teachers and the courses they are arranged to teach.",
            "Sort the results by teacher's name"
        ],
        "queries": [
            "SELECT * FROM course_arrange",
            "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
            "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Find all the course arrangements.",
            "Show names of teachers and the courses they are arranged to teach.",
            "Which teachers teach the math course? Give me their names."
        ],
        "queries": [
            "SELECT * FROM course_arrange",
            "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
            "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Show all the teacher names.",
            "Show names of teachers and the number of courses they teach."
        ],
        "queries": [
            "SELECT Name FROM teacher",
            "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Show all the teacher names.",
            "Show names of teachers and the number of courses they teach.",
            "Show the names of teachers who teach at least two courses."
        ],
        "queries": [
            "SELECT Name FROM teacher",
            "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
            "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
        ],
        "serialized_schema": " | course_teach | course : course_id , staring_date , course | teacher : teacher_id , name , age , hometown | course_arrange : course_id , teacher_id , grade"
    },
    {
        "question": [
            "Show all the available features.",
            "How many available features are there?"
        ],
        "queries": [
            "SELECT * FROM Other_Available_Features",
            "SELECT count(*) FROM Other_Available_Features"
        ],
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description"
    },
    {
        "question": [
            "Find the available features with feature name \"AirCon\".",
            "What is the feature type name?"
        ],
        "queries": [
            "SELECT * FROM Other_Available_Features WHERE feature_name  =  \"AirCon\"",
            "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
        ],
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description"
    },
    {
        "question": [
            "What is the property type description of each property?",
            "Show the property type descriptions of properties for each property type code."
        ],
        "queries": [
            "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code",
            "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
        ],
        "serialized_schema": " | real_estate_properties | ref_feature_types : feature_type_code , feature_type_name | ref_property_types : property_type_code , property_type_description | other_available_features : feature_id , feature_type_code , feature_name , feature_description | properties : property_id , property_type_code , date_on_market , date_sold , property_name , property_address , room_count , vendor_requested_price , buyer_offered_price , agreed_selling_price , apt_feature_1 , apt_feature_2 , apt_feature_3 , fld_feature_1 , fld_feature_2 , fld_feature_3 , hse_feature_1 , hse_feature_2 , hse_feature_3 , oth_feature_1 , oth_feature_2 , oth_feature_3 , shp_feature_1 , shp_feature_2 , shp_feature_3 , other_property_details | other_property_features : property_id , feature_id , property_feature_description"
    },
    {
        "question": [
            "Show all area codes and states.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM area_code_state",
            "SELECT count(*) FROM area_code_state"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all info about contestants.",
            "What are their names?",
            "Can you also show contestant numbers?",
            "Can you sort them ordered in descending order of contestant name?"
        ],
        "queries": [
            "SELECT * FROM contestants",
            "SELECT  contestant_name FROM contestants",
            "SELECT contestant_number ,  contestant_name FROM contestants",
            "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all info about votes.",
            "Also provide vote ids.",
            "Also show phone numbers."
        ],
        "queries": [
            "SELECT state FROM votes",
            "SELECT vote_id,  state FROM votes",
            "SELECT vote_id ,  phone_number ,  state FROM votes"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all area codes.",
            "What is the largest one?",
            "How about smallest one?",
            "Give me both."
        ],
        "queries": [
            "SELECT area_code FROM area_code_state",
            "SELECT max(area_code) FROM area_code_state",
            "SELECT min(area_code) FROM area_code_state",
            "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all votes.",
            "Which ones are from the state 'CA'?",
            "Among those, can you give me the last date created?"
        ],
        "queries": [
            "SELECT * FROM votes",
            "SELECT * FROM votes WHERE state  =  'CA'",
            "SELECT max(created) FROM votes WHERE state  =  'CA'"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all contestants.",
            "What are their names?",
            "Can you not include the name 'Jessie Alloway'?"
        ],
        "queries": [
            "SELECT * FROM contestants",
            "SELECT contestant_name FROM contestants",
            "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all votes?",
            "Among these, what is the list of states?",
            "What are the distinct states and create time?"
        ],
        "queries": [
            "SELECT * FROM votes",
            "SELECT state FROM votes",
            "SELECT DISTINCT state ,  created FROM votes"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all the contestants.",
            "Show all the votes.",
            "Can you show contestants with at least two votes?",
            "What are their contestant numbers and names?"
        ],
        "queries": [
            "SELECT * FROM contestants",
            "SELECT * FROM votes",
            "SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
            "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all the contestants.",
            "Show all the votes.",
            "Can you show the contestant with the least votes?",
            "What is his or her contestant number and contestant name?"
        ],
        "queries": [
            "SELECT * FROM contestants",
            "SELECT * FROM votes",
            "SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
            "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all votes.",
            "What about those from state 'NY' or 'CA'?",
            "Give me the count of these votes."
        ],
        "queries": [
            "SELECT * FROM votes",
            "SELECT * FROM votes WHERE state  =  'NY' OR state  =  'CA'",
            "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all contestants",
            "Which contestants did not get any votes?",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM contestants",
            "SELECT * FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
            "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all area codes and states.",
            "Show all votes.",
            "Get the count of votes for each area code.",
            "What is the area code in which the most voters voted?"
        ],
        "queries": [
            "SELECT * FROM area_code_state",
            "SELECT * FROM votes",
            "SELECT count(*) FROM AREA_CODE_STATE AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code",
            "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all votes.",
            "Show those that were for the contestant named 'Tabatha Gehling'.",
            "What are the create dates, states, and phone numbers of these votes?"
        ],
        "queries": [
            "SELECT * FROM votes",
            "SELECT * FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
            "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Show all area codes.",
            "Can you tell me area codes in which voters voted for the contestant 'Tabatha Gehling'?",
            "How about both the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'?"
        ],
        "queries": [
            "SELECT * FROM area_code_state",
            "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling'",
            "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
        ],
        "serialized_schema": " | voter_1 | area_code_state : area_code , state | contestants : contestant_number , contestant_name | votes : vote_id , phone_number , state , contestant_number , created"
    },
    {
        "question": [
            "Give me the description of the department that offers the most number of degrees.",
            "What's the name and id of that department?"
        ],
        "queries": [
            "SELECT T2.department_description ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
            "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show me all the degrees offered by the engineering department.",
            "How many are there?"
        ],
        "queries": [
            "SELECT * FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
            "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show me courses that have exactly 2 sections.",
            "Show me names and ids for courses that have at most 2 sections."
        ],
        "queries": [
            "SELECT * FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  =  2",
            "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Which semester did the least number of students register? Give me its name and id.",
            "How about the semester that most number of students registered?"
        ],
        "queries": [
            "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) ASC LIMIT 1",
            "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show me all department names that contain the word \"computer\"",
            "Show me their descriptions."
        ],
        "queries": [
            "SELECT * FROM Departments WHERE department_name LIKE '%computer%'",
            "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "How many people are enrolled in 2 degree programs in one semester?",
            "Show me their first, middle, and last names."
        ],
        "queries": [
            "SELECT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
            "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "How many people are enrolled in the Bachelor degree program?",
            "What are their first, middle, and last names?"
        ],
        "queries": [
            "SELECT DISTINCT count(*) FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
            "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show me the descriptions of programs with 3 highest number of enrolled students.",
            "Show me the name of program with the most enrolled students."
        ],
        "queries": [
            "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 3",
            "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "What is the description of the program that has the least number of enrolled students?",
            "How about the program that has the most number of enrolled students?",
            "Show me the id and summary."
        ],
        "queries": [
            "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) ASC LIMIT 1",
            "SELECT T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
            "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show me the id, first and last names of top 3 students who have enrolled for the most times in any program.",
            "Show me just the top 1."
        ],
        "queries": [
            "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 3",
            "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Give me the description of a semester with no enrolled students.",
            "What's the name of that semester?"
        ],
        "queries": [
            "SELECT semester_description FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
            "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "What's the name of the course with the least number of enrollments?",
            "How many enrollments does the course with most enrollments have?",
            "What's the name of that course?"
        ],
        "queries": [
            "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) ASC LIMIT 1",
            "SELECT count(*) FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
            "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "How many students currently live in North Carolina?",
            "How many of those students have not registered in any degree program?",
            "What are their last names?"
        ],
        "queries": [
            "SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina'",
            "SELECT count(*) FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
            "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show me date and id of transcripts with exactly 2 course results.",
            "How about transcripts with at least 2 course results?"
        ],
        "queries": [
            "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  = 2",
            "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "What is the address of the student with first name Timothy and last name Ward?",
            "What's his phone number?"
        ],
        "queries": [
            "SELECT current_address_id FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
            "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Who was the last student to register? Show me the first, middle, and last names of that student.",
            "Who was the first to register?"
        ],
        "queries": [
            "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered DESC LIMIT 1",
            "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Who is the least recent graduate of the school? List the first, middle, and last names.",
            "Who is the earliest graduate of the school?"
        ],
        "queries": [
            "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left DESC LIMIT 1",
            "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Give me the id of the address that holds the most number of students?",
            "How many students live there?",
            "Give me all the lines as well as the id of that address."
        ],
        "queries": [
            "SELECT T1.address_id FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "SELECT count(*) FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
            "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Give me details of the first transcript released.",
            "Tell me when it was released as well, along with its details."
        ],
        "queries": [
            "SELECT other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "What is the oldest transcript release date?",
            "How about the latest?"
        ],
        "queries": [
            "SELECT transcript_date FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
            "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "How many times, at minimum, can a course enrollment result show in different transcript? Show me the course enrollment id.",
            "How many times at most?"
        ],
        "queries": [
            "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) ASC LIMIT 1",
            "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Show other details of the transcript with least number of results.",
            "Show me the date and id of that transcript."
        ],
        "queries": [
            "SELECT T2.other_details FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
            "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "Find a semester when there was a Master student enrolled.",
            "How about a semester when there was a Bachelor student enrolled?",
            "Find a semester that both types of students were enrolled in."
        ],
        "queries": [
            "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master'",
            "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
            "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
        ],
        "serialized_schema": " | student_transcripts_tracking | addresses : address_id , line_1 , line_2 , line_3 , city , zip_postcode , state_province_county , country , other_address_details | courses : course_id , course_name , course_description , other_details | departments : department_id , department_name , department_description , other_details | degree_programs : degree_program_id , department_id , degree_summary_name , degree_summary_description , other_details | sections : section_id , course_id , section_name , section_description , other_details | semesters : semester_id , semester_name , semester_description , other_details | students : student_id , current_address_id , permanent_address_id , first_name , middle_name , last_name , cell_mobile_number , email_address , ssn , date_first_registered , date_left , other_student_details | student_enrolment : student_enrolment_id , degree_program_id , semester_id , student_id , other_details | student_enrolment_courses : student_course_id , course_id , student_enrolment_id | transcripts : transcript_id , transcript_date , other_details | transcript_contents : student_course_id , transcript_id"
    },
    {
        "question": [
            "List all the information about the owners.",
            "What about the Professionals?",
            "Now show the states of them.",
            "Which of them have both owners and professionals living there?"
        ],
        "queries": [
            "SELECT * FROM Owners",
            "SELECT * FROM Professionals",
            "SELECT state FROM Professionals",
            "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show all the dog ages.",
            "What is the maximum and minimum value?",
            "Which of the dogs have gone through treatments?",
            "What about the average age of them?"
        ],
        "queries": [
            "SELECT age FROM Dogs",
            "SELECT max(age), min(age) FROM Dogs",
            "SELECT * FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "List all the professionals who are Employees.",
            "How many of them live in Connecticut?",
            "What about in Indiana?",
            "Among all the professionals, which have done treatment only 1 treatments?",
            "List the id, last name and cell phone of the professionals who live in the state of Indiana or have done treatment on more than 2 treatments?"
        ],
        "queries": [
            "SELECT * FROM Professionals WHERE role_code = 'Employee'",
            "SELECT count(*) FROM Professionals WHERE state  =  'Connecticut'",
            "SELECT count(*) FROM Professionals WHERE state  =  'Indiana'",
            "SELECT * FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  =  1",
            "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the dog name and total cost of each dog.",
            "Which of them cost over 500?",
            "What about more than 1000?"
        ],
        "queries": [
            "SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id",
            "SELECT name FROM Treatments  AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 500",
            "SELECT name FROM Dogs WHERE dog_id NOT IN( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "List all the names of both Professionals and Owners.",
            "What about the dog names?",
            "Which human names are not used as dog names."
        ],
        "queries": [
            "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners",
            "SELECT name FROM Dogs",
            "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the professional first names and the corresponding treatment type codes for the treatment.",
            "What about each professional's id, role, email and the treatment type code?",
            "Which professional did not provide any treatment? Keep the id, role and email."
        ],
        "queries": [
            "SELECT T1.first_name, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
            "SELECT T1.professional_id ,  T1.role_code ,  T1.email_address, T2.treatment_type_code  FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
            "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the number of dogs for each owner, keep the owner id.",
            "Which one has 2 dogs?",
            "What about the one with the most dogs?"
        ],
        "queries": [
            "SELECT T1.owner_id ,count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id",
            "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name, count(*) FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id Having count(*) = 2",
            "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "How many treatment does each professional finished?",
            "Show the first name of the professionals who did only 1 treatment.",
            "What about at least two treatments?",
            "Show the id, role, and first name of each from the above."
        ],
        "queries": [
            "SELECT T1.professional_id , count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id",
            "SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id Having count(*) = 1",
            "SELECT T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id Having count(*) >= 2",
            "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "How many dogs for each breed code?",
            "Which breed codes are the most popular two?",
            "What about the most common 1?",
            "What name is the breed?"
        ],
        "queries": [
            "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code",
            "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 2",
            "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code limit 1",
            "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the dog name and total cost of each dog.",
            "What are the owner names and the cost from their dogs.",
            "Who has paid for the most treatments on the dogs? Keep owner IDs and last names."
        ],
        "queries": [
            "SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN dogs AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id",
            "SELECT T1.owner_id, T3.cost_of_treatment  FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id",
            "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "List the treatment type code and the description.",
            "For each treatment type, calculate the sum of costs, and order them in descending order.",
            "Show the treatment type description also.",
            "So what is the description of the treatment type that costs the least money in total?"
        ],
        "queries": [
            "SELECT * FROM Treatment_Types",
            "SELECT treatment_type_code, sum(cost_of_treatment) FROM Treatments group by treatment_type_code order by sum(cost_of_treatment) desc",
            "SELECT T2.treatment_type_code, T1.treatment_type_description,  sum(cost_of_treatment) FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
            "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the dog name and total cost of each dog.",
            "How many of them cost over 700?",
            "Which owner paid the cost larger than 400, show the owner id and the zip code?",
            "What about the owner who spent the largest cost?"
        ],
        "queries": [
            "SELECT name, sum(cost_of_treatment) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id",
            "SELECT count(name) FROM Treatments AS T1 JOIN DOGS AS T2 ON T1.dog_id = T2.dog_id GROUP BY T1.dog_id Having sum(cost_of_treatment) > 700",
            "SELECT T1.owner_id ,T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id Having sum(T3.cost_of_treatment) > 400",
            "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "List the professional first names and their types of treatments.",
            "Add the counts of them also.",
            "Among the results, who did only 1 type of treatment? List the professional ids and cell phone numbers of them.",
            "What about at least two types of treatments?"
        ],
        "queries": [
            "SELECT T1.first_name, T2.treatment_type_code FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id",
            "SELECT T1.first_name, T2.treatment_type_code, count(*) FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id",
            "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  = 1",
            "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "What is the minimum, maximum and average value of the treatment costs?",
            "Which professionals who did the minimum value of the treatment cost? Provide the first name and last name.",
            "What about the maximum cost?",
            "How about below the average of the cost?"
        ],
        "queries": [
            "SELECT min(cost_of_treatment), max(cost_of_treatment), avg(cost_of_treatment) FROM Treatments",
            "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT min(cost_of_treatment) FROM Treatments )",
            "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  = ( SELECT max(cost_of_treatment) FROM Treatments )",
            "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "How many dogs for each breed code?",
            "Which one is the most popular one?",
            "What about the least popular one?",
            "So which dogs are having the breed code? And the treatment dates?"
        ],
        "queries": [
            "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code",
            "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) DESC LIMIT 1",
            "SELECT breed_code, count(*) FROM Dogs GROUP BY breed_code Order BY count(*) ASC LIMIT 1",
            "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the name of dogs whose owners are from the city 'Lake Tia'.",
            "Add the owner's first names also.",
            "What about when the owner is from the state of 'Virginia'?"
        ],
        "queries": [
            "SELECT T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.city  =  'Lake Tia'",
            "SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.city  =  'Lake Tia'",
            "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Which one is the oldest dog? List the information of it.",
            "What are the last names of the oldest dogs?",
            "What about the owner last name of the youngest dog?"
        ],
        "queries": [
            "SELECT * FROM Dogs order by age asc limit 1",
            "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
            "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT min(age) FROM Dogs )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the cities and states of the professionals.",
            "How many of them are from 'Hawaii'?",
            "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin."
        ],
        "queries": [
            "SELECT city, state FROM professionals",
            "SELECT count(*) FROM professionals WHERE state = 'Hawaii'",
            "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the states of the professionals.",
            "How many of them are from 'Wisconsin'?",
            "List the role code ,  street ,  city ,  state from the above results.",
            "What about those professionals who live in a city containing the substring 'West'?"
        ],
        "queries": [
            "SELECT state FROM professionals",
            "SELECT count(*) FROM professionals WHERE state = 'Wisconsin'",
            "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE state = 'Wisconsin'",
            "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the states of the owners.",
            "How many of them are from 'Vermont'?",
            "List the first name, last name and email of the owners who lives in the states that has the substring 'North'."
        ],
        "queries": [
            "SELECT state FROM Owners",
            "SELECT count(*) FROM Owners WHERE state = 'Vermont'",
            "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Order the dog ages in descending order.",
            "How many of them are below 4?",
            "What about the ones that are below the average?"
        ],
        "queries": [
            "SELECT age FROM Dogs ORDER BY age",
            "SELECT count(*) FROM Dogs WHERE age  < 4",
            "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show the treatment details.",
            "Order the cost in ascending order.",
            "What about in descending order?",
            "Which one is the most recent cost?"
        ],
        "queries": [
            "SELECT * FROM Treatments",
            "SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment ASC",
            "SELECT cost_of_treatment FROM Treatments ORDER BY cost_of_treatment DESC",
            "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show all the owner information.",
            "What about the dogs?",
            "Among those, how many of them have been sent to receive treatment?",
            "What about those who did not?"
        ],
        "queries": [
            "SELECT * FROM Owners",
            "SELECT count(*) FROM Dogs",
            "SELECT count(*) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
            "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "Show all the owner information.",
            "How many of them come from the state of 'Arizona'?",
            "What about those who do not have any dogs temporarily?"
        ],
        "queries": [
            "SELECT * FROM Owners",
            "SELECT count(*) FROM Owners WHERE state = 'Arizona'",
            "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    },
    {
        "question": [
            "How many professionals are there?",
            "How many of them come from 'West Heidi?'",
            "What about those who did not operate any treatment on dogs?"
        ],
        "queries": [
            "SELECT count(*) FROM Professionals",
            "SELECT count(*) FROM Professionals WHERE city = 'West Heidi'",
            "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
        ],
        "serialized_schema": " | dog_kennels | breeds : breed_code , breed_name | charges : charge_id , charge_type , charge_amount | sizes : size_code , size_description | treatment_types : treatment_type_code , treatment_type_description | owners : owner_id , first_name , last_name , street , city , state , zip_code , email_address , home_phone , cell_number | dogs : dog_id , owner_id , abandoned_yn , breed_code , size_code , name , age , date_of_birth , gender , weight , date_arrived , date_adopted , date_departed | professionals : professional_id , role_code , first_name , street , city , state , zip_code , last_name , email_address , home_phone , cell_number | treatments : treatment_id , dog_id , professional_id , treatment_type_code , date_of_treatment , cost_of_treatment"
    }
]